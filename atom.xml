<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>烟湮燕眼&#39;s Notes</title>
  
  
  <link href="http://yoursite.com/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2021-04-27T03:58:44.508Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>烟湮燕眼</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>「Algorithmic questions」动态规划</title>
    <link href="http://yoursite.com/2021/04/26/%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98/%E3%80%8CAlgorithmic%20questions%E3%80%8D%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    <id>http://yoursite.com/2021/04/26/%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98/%E3%80%8CAlgorithmic%20questions%E3%80%8D%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</id>
    <published>2021-04-26T04:22:16.000Z</published>
    <updated>2021-04-27T03:58:44.508Z</updated>
    
    <content type="html"><![CDATA[<p>开个坑。感觉算法题还是要经常练保持手感，前段时间蓝桥杯，感觉大一时洛谷那么多题白刷了，那么多算法模板白总结了，都忘完了。做算法题还是要尽量自己多想，不思考看题解忘得太快。虽然最近比较忙，但每两天做一点应该还是可以的（吧）。希望不咕。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;开个坑。感觉算法题还是要经常练保持手感，前段时间蓝桥杯，感觉大一时洛谷那么多题白刷了，那么多算法模板白总结了，都忘完了。做算法题还是要尽量自己多想，不思考看题解忘得太快。虽然最近比较忙，但每两天做一点应该还是可以的（吧）。希望不咕。&lt;/p&gt;
</summary>
      
    
    
    
    <category term="Algorithm problems" scheme="http://yoursite.com/categories/Algorithm-problems/"/>
    
    
    <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
    <category term="algorithmic questions" scheme="http://yoursite.com/tags/algorithmic-questions/"/>
    
    <category term="dp" scheme="http://yoursite.com/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>「OOP」设计模式</title>
    <link href="http://yoursite.com/2021/04/24/object_oriented/%E3%80%8COO%E3%80%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2021/04/24/object_oriented/%E3%80%8COO%E3%80%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</id>
    <published>2021-04-24T12:54:47.000Z</published>
    <updated>2021-04-28T09:34:39.292Z</updated>
    
    <content type="html"><![CDATA[<h1 id="OOP原则"><a href="#OOP原则" class="headerlink" title="OOP原则"></a>OOP原则</h1><h2 id="1-单一职责"><a href="#1-单一职责" class="headerlink" title="1. 单一职责"></a>1. 单一职责</h2><blockquote><p>一个类只负责一项职责。</p></blockquote><p>这是很符合直觉的。但需要警惕<strong>职责扩散</strong>：即因为某种原因，职责P被分化为粒度更细的职责P1和P2，这时如果将类T也分解为两个类T1和T2，分别负责P1、P2两个职责，可能比较费时间。所以，简单的修改类T，用它来负责两个职责似乎是一个比较不错的选择（这样做的风险在于职责扩散的不确定性，因为职责P在未来可能会扩散为P1，P2，P3，P4……Pn）</p><h2 id="2-里氏替换原则"><a href="#2-里氏替换原则" class="headerlink" title="2. 里氏替换原则"></a>2. 里氏替换原则</h2><p>里氏代换原则(<code>Liskov Substitution Principle</code> <code>LSP</code>)，实现抽象的规范，实现子父类互相替换。可以定义为：</p><blockquote><ul><li>如果对每一个类型为 T1的对象 o1，都有类型为 T2 的对象o2，使得以 T1定义的所有程序 P 在所有的对象 o1 都代换成 o2 时，程序 P 的行为没有发生变化，那么类型 T2 是类型 T1 的子类型。</li><li>所有引用基类的地方必须能透明地使用其子类的对象。<br>通俗地讲：子类可以扩展父类的功能，但不能改变父类原有的功能。它包含以下几点含义：</li></ul></blockquote><ul><li>子类可以实现父类的抽象方法，但不能覆盖父类的非抽象方法。</li><li>子类中可以增加自己特有的方法。</li><li>当子类的方法重载父类的方法时，方法的前置条件（即方法的形参）要比父类方法的输入参数更宽松。</li><li>当子类的方法实现父类的抽象方法时，方法的后置条件（即方法的返回值）要比父类更严格。</li></ul><p>实际编程中，我们常常会通过重写父类的方法来完成新的功能，这样写起来虽然简单，但是整个继承体系的可复用性会比较差，特别是运用多态比较频繁时，程序运行出错的几率非常大。如果非要重写父类的方法，比较通用的做法是：<strong>原来的父类和子类都继承一个更通俗的基类，原有的继承关系去掉，采用依赖、聚合，组合等关系代替</strong>。</p><p>继承有利同时也有弊。比如使用继承会给程序带来侵入性，程序的可移植性降低，增加了对象间的耦合性，如果一个类被其他的类所继承，则当这个类需要修改时，必须考虑到所有的子类。</p><h2 id="3-依赖倒置原则"><a href="#3-依赖倒置原则" class="headerlink" title="3. 依赖倒置原则"></a>3. 依赖倒置原则</h2><blockquote><p>高层模块不应该依赖低层模块，二者都应该依赖其抽象；抽象不应该依赖细节；细节应该依赖抽象。</p></blockquote><p>以抽象为基础搭建起来的架构比以细节为基础搭建起来的架构要稳定的多。在java中，抽象指的是接口或者抽象类，细节就是具体的实现类，<strong>使用接口或者抽象类的目的是制定好规范和契约，而不去涉及任何具体的操作，把展现细节的任务交给他们的实现类去完成。</strong>面向接口编程，而非面向实现编程。</p><p>问题来源：类A直接依赖类B，假如要将类A改为依赖类C，则必须通过修改类A的代码来达成。这种场景下，类A一般是高层模块，负责复杂的业务逻辑；类B和类C是低层模块，负责基本的原子操作；假如修改类A，会给程序带来不必要的风险。</p><p>解决方案：将类A修改为依赖接口I，类B和类C各自实现接口I，类A通过接口I间接与类B或者类C发生联系，则会大大降低修改类A的几率。</p><p>举个栗子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mother</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">narrate</span><span class="params">(Book book)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;妈妈开始讲故事&quot;</span>);</span><br><span class="line">        System.out.println(book.getContent());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样依赖的是<code>Book</code>这个具体的实现类，如果有一天故事的来源变成报纸，我们还要修改<code>Mother</code>类，这样的设计显然不好，<code>Mother</code>与<code>Book</code>之间的耦合性太高，因此我们可以引入一个接口读物<code>IReader</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IReader</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getContent</span><span class="params">()</span></span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mother</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">narrate</span><span class="params">(IReader reader)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;妈妈开始讲故事&quot;</span>);</span><br><span class="line">        System.out.println(reader.getContent());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样的传递依赖关系即为接口传递。另外还有两种传递方式：构造方法传递和setter方法传递。</p><p><strong>在实际编程中，我们一般需要做到：</strong></p><ul><li><strong>低层模块尽量都要有抽象类或接口，或者两者都有。</strong></li><li><strong>变量的声明类型尽量是抽象类或接口。</strong></li></ul><h2 id="4-接口隔离原则"><a href="#4-接口隔离原则" class="headerlink" title="4. 接口隔离原则"></a>4. 接口隔离原则</h2><blockquote><p>使用多个隔离的接口，比使用单个接口要好。一个类对另一个类的依赖应该建立在最小的接口上。 </p></blockquote><p>也就是说，我们要为各个类建立专用的接口，尽量细化接口，而不要试图去建立一个很庞大的接口供所有依赖它的类去调用。</p><h2 id="5-迪米特法则（最少知道原则）"><a href="#5-迪米特法则（最少知道原则）" class="headerlink" title="5. 迪米特法则（最少知道原则）"></a>5. 迪米特法则（最少知道原则）</h2><blockquote><p>一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。</p></blockquote><p>通俗地讲，对于被依赖的类来说，无论逻辑多么复杂，都尽量地的将逻辑封装在类的内部，对外除了提供的public方法，不对外泄漏任何信息。</p><h2 id="6-开闭原则"><a href="#6-开闭原则" class="headerlink" title="6. 开闭原则"></a>6. 开闭原则</h2><blockquote><p>对扩展开放，对修改关闭</p></blockquote><p>问题由来：在软件的生命周期内，因为变化、升级和维护等原因需要对软件原有代码进行修改时，可能会给旧代码中引入错误，也可能会使我们不得不对整个功能进行重构，并且需要原有代码经过重新测试。</p><p>解决方案：当软件需要变化时，尽量通过扩展软件实体的行为来实现变化，而不是通过修改已有的代码来实现变化。</p><hr><p>当然，制定这六个原则的目的并不是要我们刻板的遵守他们，而需要根据实际情况灵活运用。对它们的遵守程度只要在一个合理的范围内，就算是良好的设计。</p><h2 id="7-合成复用原则"><a href="#7-合成复用原则" class="headerlink" title="7. 合成复用原则"></a>7. 合成复用原则</h2><p>合成复用原则（<code>Composite Reuse Principle</code>）是指：尽量使用合成/聚合的方式，而不是使用继承。</p><h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><h2 id="肾莫是设计模式"><a href="#肾莫是设计模式" class="headerlink" title="肾莫是设计模式"></a>肾莫是设计模式</h2><p>设计模式（<code>Design pattern</code>）是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了可重用代码、让代码更容易被他人理解、保证代码可靠性。 </p><p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的总体指导思路或参照样板。软件模式除了设计模式，还包括架构模式、分析模式和过程模式等。</p><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><ul><li><strong>创建型模式</strong></li></ul><p>对象实例化的模式，创建型模式用于解耦对象的实例化过程。</p><ul><li><strong>结构型模式</strong></li></ul><p>把类或对象结合在一起形成一个更大的结构。</p><ul><li><strong>行为型模式</strong></li></ul><p>类和对象如何交互，及划分责任和算法。以及对象之间的通信问题。</p><h2 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h2><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><blockquote><p>确保某一个类只有一个实例，并且提供一个全局访问点。</p></blockquote><p>场景：一个系统中可以存在多个打印任务，但是只能有一个正在工作的任务；一个系统只能有一个窗口管理器或文件系统；一个系统只能有一个计时工具或ID（序号）生成器。</p><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><ul><li><strong>饿汉式</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比较常用。它基于<code>classloader</code> 机制避免了多线程的同步问题，没有加锁，效率高。但类加载时就初始化，浪费内存。</p><ul><li><strong>双重校验锁</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton singleton;  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getSingleton</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;  </span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;  </span><br><span class="line">                <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;  </span><br><span class="line">                    singleton = <span class="keyword">new</span> Singleton();  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    <span class="keyword">return</span> singleton;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>采用双锁机制，安全且在多线程情况下能保持高性能。</p><ul><li><strong>登记式/静态内部类</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> SingletonHolder.INSTANCE;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Singleton 类被装载了，instance 不一定被初始化。因为 SingletonHolder 类没有被主动使用，只有通过显式调用 getInstance 方法时，才会显式装载 SingletonHolder 类，从而实例化 instance。</p><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li>提供了对唯一实例的受控访问。因为单例类封装了它的唯一实例，所以它可以严格控制客户怎样以及何时访问它，并为设计及开发团队提供了共享的概念。</li><li>由于在系统内存中只存在一个对象，因此可以节约系统资源，对于一些需要频繁创建和销毁的对象，单例模式无疑可以提高系统的性能。</li><li>允许可变数目的实例。我们可以基于单例模式进行扩展，使用与单例控制相似的方法来获得指定个数的对象实例。</li></ul><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li>由于单例模式中没有抽象层，因此单例类的扩展有很大的困难。</li><li>单例类的职责过重，在一定程度上违背了“单一职责原则”。因为单例类既充当了工厂角色，提供了工厂方法，同时又充当了产品角色，包含一些业务方法，将产品的创建和产品的本身的功能融合到一起。</li><li>滥用单例将带来一些负面问题，如为了节省资源将数据库连接池对象设计为单例类，可能会导致共享连接池对象的程序过多而出现连接池溢出；现在很多面向对象语言(如Java、C#)的运行环境都提供了自动垃圾回收的技术，因此，如果实例化的对象长时间不被利用，系统会认为它是垃圾，会自动销毁并回收资源，下次利用时又将重新实例化，这将导致对象状态的丢失。</li></ul><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><blockquote><p>工厂方法模式定义了一个创建对象的接口，但由子类决定要实例化的类是哪一个，也就是说工厂方法模式让实例化推迟到子类。</p></blockquote><h4 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Inside Rectangle::draw() method.&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Inside Circle::draw() method.&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShapeFactory</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> Shape <span class="title">getShape</span><span class="params">(String shapeType)</span></span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(shapeType == <span class="keyword">null</span>)&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">      &#125;        </span><br><span class="line">      <span class="keyword">if</span>(shapeType.equalsIgnoreCase(<span class="string">&quot;CIRCLE&quot;</span>))&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> Circle();</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span>(shapeType.equalsIgnoreCase(<span class="string">&quot;RECTANGLE&quot;</span>))&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> Rectangle();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h3><blockquote><p>提供一个创建一系列相关或相互依赖对象的接口，而无须指定它们具体的类。抽象工厂模式又称为Kit模式，属于对象创建型模式。</p></blockquote><p>通俗地讲，就是围绕一个抽象工厂创建具体工厂。这样创建的产品可以使多个维度的。这里以创建“形状”与“颜色”两个维度举例：</p><p>多个产品的接口及其实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Shape接口、Rectangle类、Circle类同上</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 颜色接口及其实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Color</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">fill</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Red</span> <span class="keyword">implements</span> <span class="title">Color</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fill</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Inside Red::fill() method.&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Green</span> <span class="keyword">implements</span> <span class="title">Color</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fill</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Inside Green::fill() method.&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>提到的抽象工厂，只要负责定义多个维度的产品的创建接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Color <span class="title">getColor</span><span class="params">(String color)</span></span>;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Shape <span class="title">getShape</span><span class="params">(String shape)</span> </span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>抽象工厂的具体实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ShapeFactory 同上</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ColorFactory</span> <span class="keyword">extends</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Shape <span class="title">getShape</span><span class="params">(String shapeType)</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Color <span class="title">getColor</span><span class="params">(String color)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(color == <span class="keyword">null</span>)&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">      &#125;        </span><br><span class="line">      <span class="keyword">if</span>(color.equalsIgnoreCase(<span class="string">&quot;RED&quot;</span>))&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> Red();</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span>(color.equalsIgnoreCase(<span class="string">&quot;BLUE&quot;</span>))&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> Blue();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建一个工厂创造器/生成器类，通过传递形状或颜色信息来获取工厂：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryProducer</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> AbstractFactory <span class="title">getFactory</span><span class="params">(String choice)</span></span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(choice.equalsIgnoreCase(<span class="string">&quot;SHAPE&quot;</span>))&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> ShapeFactory();</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span>(choice.equalsIgnoreCase(<span class="string">&quot;COLOR&quot;</span>))&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> ColorFactory();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取形状工厂</span></span><br><span class="line">AbstractFactory shapeFactory = FactoryProducer.getFactory(<span class="string">&quot;SHAPE&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取形状为 Circle 的对象</span></span><br><span class="line">Shape shape1 = shapeFactory.getShape(<span class="string">&quot;CIRCLE&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4><ul><li>在添加新的产品对象时，难以扩展抽象工厂来生产新种类的产品，这是因为在抽象工厂角色中规定了所有可能被创建的产品集合，要支持新种类的产品就意味着要对该接口进行扩展，而这将涉及到对抽象工厂角色及其所有子类的修改，显然会带来较大的不便。</li><li>开闭原则的倾斜性（增加新的工厂和产品族容易，增加新的产品等级结构麻烦）。</li></ul><h3 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h3><blockquote><p>使用多个简单的对象一步一步构建成一个复杂的对象。将一个复杂的构建与其表示相分离，使得同样的构建过程可以创建不同的表示。</p></blockquote><p><code>StringBuilder</code>就采用本模式实现。</p><p>本模式包含如下角色：</p><ul><li>Builder：抽象建造者</li><li>ConcreteBuilder：具体建造者，创建和提供实例</li><li>Director：指挥者，管理建造出来的实例的依赖关系</li><li>Product：产品角色</li></ul><h4 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h4><p>建造者：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildPart1</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildPart2</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildPart3</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体的建造者：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteBuilder1</span> <span class="keyword">extends</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> StringBuffer buffer = <span class="keyword">new</span> StringBuffer();<span class="comment">//假设 buffer.toString() 就是最终生成的产品</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildPart1</span><span class="params">()</span> </span>&#123;<span class="comment">//实现构建最终实例需要的所有方法</span></span><br><span class="line">        buffer.append(<span class="string">&quot;Builder1 : Part1\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildPart2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        buffer.append(<span class="string">&quot;Builder1 : Part2\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildPart3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        buffer.append(<span class="string">&quot;Builder1 : Part3\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getResult</span><span class="params">()</span> </span>&#123;<span class="comment">//定义获取最终生成实例的方法</span></span><br><span class="line">        <span class="keyword">return</span> buffer.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>指挥者：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Director</span> </span>&#123;    <span class="comment">// 将一个复杂的构建过程与其表示相分离</span></span><br><span class="line">    <span class="keyword">private</span> Builder builder;    <span class="comment">// 针对接口编程，而不是针对实现编程</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Director</span><span class="params">(Builder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.builder = builder;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBuilder</span><span class="params">(Builder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.builder = builder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">construct</span><span class="params">()</span> </span>&#123;   <span class="comment">// 控制（定义）一个复杂的构建过程</span></span><br><span class="line">        builder.buildPart1();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;   <span class="comment">// 提示：如果想在运行过程中替换构建算法，可以考虑结合策略模式。</span></span><br><span class="line">            builder.buildPart2();</span><br><span class="line">        &#125;</span><br><span class="line">        builder.buildPart3();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h4><ul><li>如果产品之间的差异性很大，则不适合使用建造者模式。</li><li>如果产品的内部变化复杂，可能会导致需要定义很多具体建造者类来实现这种变化，导致系统变得很庞大。</li></ul><h4 id="与抽象工厂模式对比"><a href="#与抽象工厂模式对比" class="headerlink" title="与抽象工厂模式对比"></a>与抽象工厂模式对比</h4><ul><li>在抽象工厂模式中，客户端实例化工厂类，然后调用工厂方法获取所需产品对象，而在建造者模式中，客户端可以不直接调用建造者的相关方法，而是通过指挥者类来指导如何生成对象，包括对象的组装过程和建造步骤，它侧重于一步步构造一个复杂对象，返回一个完整的对象。</li><li>如果将抽象工厂模式看成 汽车配件生产工厂 ，生产一个产品族的产品，那么建造者模式就是一个 汽车组装工厂 ，通过对部件的组装可以返回一辆完整的汽车。</li></ul><h2 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h2><h3 id="适配器模式（Adapter）"><a href="#适配器模式（Adapter）" class="headerlink" title="适配器模式（Adapter）"></a>适配器模式（Adapter）</h3><blockquote><p>将一个类的接口转换成客户希望的另外一个接口。适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。</p></blockquote><p>我们可能需要将两个不同接口的类来进行通信，在不修改这两个的前提下，我们可能会需要某个中间件来完成这个衔接的过程。这个中间件就是适配器。所谓适配器模式就是将一个类的接口，转换成客户期望的另一个接口。</p><h4 id="实现-3"><a href="#实现-3" class="headerlink" title="实现"></a>实现</h4><p>例：电脑只有读SD卡的接口，现在要读TF卡：</p><ol><li>先创建一个SD卡与TF卡的接口与其实现类：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* -- SD card -- */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SDCard</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">readSD</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">writeSD</span><span class="params">(String msg)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SDCardImpl</span> <span class="keyword">implements</span> <span class="title">SDCard</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span>    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">readSD</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String msg = <span class="string">&quot;sdcard read a msg :hello word SD&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> msg;  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">writeSD</span><span class="params">(String msg)</span> </span>&#123;      </span><br><span class="line">        System.out.println(<span class="string">&quot;sd card write msg : &quot;</span> + msg);    </span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* -- TF card -- */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TFCard</span> </span>&#123;    </span><br><span class="line">    <span class="function">String <span class="title">readTF</span><span class="params">()</span></span>;    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">writeTF</span><span class="params">(String msg)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TFCardImpl</span> <span class="keyword">implements</span> <span class="title">TFCard</span> </span>&#123;    </span><br><span class="line">    <span class="meta">@Override</span>    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">readTF</span><span class="params">()</span> </span>&#123;        </span><br><span class="line">        String msg =<span class="string">&quot;tf card reade msg : hello word tf card&quot;</span>;        </span><br><span class="line">        <span class="keyword">return</span> msg;    </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="meta">@Override</span>    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">writeTF</span><span class="params">(String msg)</span> </span>&#123;        </span><br><span class="line">        System.out.println(<span class="string">&quot;tf card write a msg : &quot;</span> + msg);        </span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建计算机接口与计算机实例，计算机提供读取SD卡方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Computer</span> </span>&#123;    </span><br><span class="line">    <span class="function">String <span class="title">readSD</span><span class="params">(SDCard sdCard)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThinkpadComputer</span> <span class="keyword">implements</span> <span class="title">Computer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span>    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">readSD</span><span class="params">(SDCard sdCard)</span> </span>&#123;        </span><br><span class="line">        <span class="keyword">if</span>(sdCard == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">&quot;sd card null&quot;</span>);        </span><br><span class="line">        <span class="keyword">return</span> sdCard.readSD();    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时我们希望在不改变计算机读取SD卡接口的情况下，通过适配器模式读取TF卡：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">/* -- 创建SD适配TF （也可以说是SD兼容TF，相当于读卡器）：  -- */</span></span><br><span class="line"><span class="comment">// 实现SDCard接口，并将要适配的对象作为适配器的属性引入。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SDAdapterTF</span> <span class="keyword">implements</span> <span class="title">SDCard</span> </span>&#123;    </span><br><span class="line">    <span class="keyword">private</span> TFCard tfCard;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SDAdapterTF</span><span class="params">(TFCard tfCard)</span> </span>&#123;        </span><br><span class="line">        <span class="keyword">this</span>.tfCard = tfCard;    </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="meta">@Override</span>    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">readSD</span><span class="params">()</span> </span>&#123;        </span><br><span class="line">        System.out.println(<span class="string">&quot;adapter read tf card &quot;</span>);        </span><br><span class="line">        <span class="keyword">return</span> tfCard.readTF();    </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="meta">@Override</span>    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">writeSD</span><span class="params">(String msg)</span> </span>&#123;        </span><br><span class="line">        System.out.println(<span class="string">&quot;adapter write tf card&quot;</span>);        </span><br><span class="line">        <span class="keyword">return</span> tfCard.writeTF(msg);    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就可以读取TF卡：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComputerReadDemo</span> </span>&#123;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        </span><br><span class="line">        Computer computer = <span class="keyword">new</span> ThinkpadComputer();            </span><br><span class="line">        TFCard tfCard = <span class="keyword">new</span> TFCardImpl();        </span><br><span class="line">        SDCard tfCardAdapterSD = <span class="keyword">new</span> SDAdapterTF(tfCard);        </span><br><span class="line">        System.out.println(computer.readSD(tfCardAdapterSD));    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="组合模式（Composite-）"><a href="#组合模式（Composite-）" class="headerlink" title="组合模式（Composite ）"></a>组合模式（Composite ）</h3><blockquote><p>将对象组合成树形结构以表示”部分-整体”的层次结构。</p></blockquote><p>看代码很容易理解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line">   <span class="keyword">private</span> String dept;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> salary;</span><br><span class="line">   <span class="keyword">private</span> List&lt;Employee&gt; subordinates;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">//构造函数</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String name,String dept, <span class="keyword">int</span> sal)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.name = name;</span><br><span class="line">      <span class="keyword">this</span>.dept = dept;</span><br><span class="line">      <span class="keyword">this</span>.salary = sal;</span><br><span class="line">      subordinates = <span class="keyword">new</span> ArrayList&lt;Employee&gt;();</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Employee e)</span> </span>&#123;</span><br><span class="line">      subordinates.add(e);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="外观模式（Facade-）"><a href="#外观模式（Facade-）" class="headerlink" title="外观模式（Facade ）"></a>外观模式（Facade ）</h3><blockquote><p>外部与一个子系统的通信必须通过一个统一的外观对象进行，为子系统中的一组接口提供一个一致的界面</p></blockquote><p>我们知道类与类之间的耦合越低，那么可复用性就越好，如果两个类不必彼此通信，那么就不要让这两个类发生直接的相互关系，如果需要调用里面的方法，可以通过第三者来转发调用。外观模式非常好的诠释了这段话。外观模式提供了一个统一的接口，用来访问子系统中的一群接口，实现了客户与子系统之间的松耦合。</p><h4 id="实现-4"><a href="#实现-4" class="headerlink" title="实现"></a>实现</h4><p>电脑的外观：打开开关按钮，就可以开机（启动CPU，内存，硬盘…）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** * 电脑接口 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Computer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">open</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** * CPU类 */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cpu</span> <span class="keyword">implements</span> <span class="title">Computer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;启动CPU&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** * 内存类 */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ddr</span> <span class="keyword">implements</span> <span class="title">Computer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;启动内存&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** * 硬盘类 */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ssd</span> <span class="keyword">implements</span> <span class="title">Computer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;启动硬盘&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/** * 外观类 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Facade</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Computer cpu;</span><br><span class="line">    <span class="keyword">private</span> Computer ddr;</span><br><span class="line">    <span class="keyword">private</span> Computer ssd;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Facade</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cpu = <span class="keyword">new</span> Cpu();</span><br><span class="line">        ddr = <span class="keyword">new</span> Ddr();</span><br><span class="line">        ssd = <span class="keyword">new</span> Ssd();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 启动电脑 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComputer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cpu.open();</span><br><span class="line">        ddr.open();</span><br><span class="line">        ssd.open();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FacadeTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Facade facade = <span class="keyword">new</span> Facade();</span><br><span class="line">        facade.onComputer();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代理模式（Proxy-）"><a href="#代理模式（Proxy-）" class="headerlink" title="代理模式（Proxy ）"></a>代理模式（Proxy ）</h3><blockquote><p>创建具有现有对象的对象，以便向外界提供功能接口。</p></blockquote><p>某些情况下，一个客户不想或不能直接引用一个对象，此时可以通过一个称之为“代理”的第三者来实现间接引用。代理对象可以在客户端和目标对象之间起到中介的作用，并且可以通过代理对象去掉客户不能看到的内容和服务或者添加客户需要的额外服务。</p><h4 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h4><ul><li>Subject： 抽象主题角色</li><li>Proxy： 代理主题角色</li><li>RealSubject： 真实主题角色</li></ul><h4 id="实现-5"><a href="#实现-5" class="headerlink" title="实现"></a>实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Image</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*  RealSubject  */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RealImage</span> <span class="keyword">implements</span> <span class="title">Image</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">private</span> String fileName;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">RealImage</span><span class="params">(String fileName)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.fileName = fileName;</span><br><span class="line">      loadFromDisk(fileName);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Displaying &quot;</span> + fileName);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadFromDisk</span><span class="params">(String fileName)</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Loading &quot;</span> + fileName);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*  Proxy  */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyImage</span> <span class="keyword">implements</span> <span class="title">Image</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">private</span> RealImage realImage;</span><br><span class="line">   <span class="keyword">private</span> String fileName;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">ProxyImage</span><span class="params">(String fileName)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.fileName = fileName;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(realImage == <span class="keyword">null</span>)&#123;</span><br><span class="line">         realImage = <span class="keyword">new</span> RealImage(fileName);</span><br><span class="line">      &#125;</span><br><span class="line">      realImage.display();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Image image = <span class="keyword">new</span> ProxyImage(<span class="string">&quot;test_10mb.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 图像将从磁盘加载</span></span><br><span class="line">    image.display(); </span><br><span class="line">    System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="comment">// 图像不需要从磁盘加载</span></span><br><span class="line">    image.display();  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="适用环境"><a href="#适用环境" class="headerlink" title="适用环境"></a>适用环境</h4><p>根据代理模式的使用目的，常见的代理模式有以下几种类型：</p><ul><li>远程(Remote)代理：为一个位于不同的地址空间的对象提供一个本地 的代理对象，这个不同的地址空间可以是在同一台主机中，也可是在 另一台主机中，远程代理又叫做大使(Ambassador)。</li><li>虚拟(Virtual)代理：如果需要创建一个资源消耗较大的对象，先创建一个消耗相对较小的对象来表示，真实对象只在需要时才会被真正创建。</li><li>图片代理：一个很常见的代理模式的应用实例就是对大图浏览的控制。用户通过浏览器访问网页时先在代理对象的方法中，使用一个线程向客户端浏览器加载一个小图片，然后在后台使用另一个线程来调用大图加载方法将大图片加载到客户端。当需要浏览大图片时，再将大图片在新网页中显示。如果此时加载工作还没完成，可以再启动一个线程来显示相应的提示信息。通过代理技术结合多线程编程将真实图片的加载放到后台来操作，不影响前台图片的浏览。</li><li>动态代理：在事先不知道真实主题角色的情况下使用代理主题角色。</li></ul><p>对于动态代理，JDK有自带的包：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java.lang.reflect.Proxy: 生成动态代理类和对象；</span><br><span class="line">java.lang.reflect.InvocationHandler（处理器接口）：可以通过invoke方法实现</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;OOP原则&quot;&gt;&lt;a href=&quot;#OOP原则&quot; class=&quot;headerlink&quot; title=&quot;OOP原则&quot;&gt;&lt;/a&gt;OOP原则&lt;/h1&gt;&lt;h2 id=&quot;1-单一职责&quot;&gt;&lt;a href=&quot;#1-单一职责&quot; class=&quot;headerlink&quot; title=&quot;1</summary>
      
    
    
    
    <category term="ObjectOriented" scheme="http://yoursite.com/categories/ObjectOriented/"/>
    
    
    <category term="OO" scheme="http://yoursite.com/tags/OO/"/>
    
    <category term="OOP七大原则" scheme="http://yoursite.com/tags/OOP%E4%B8%83%E5%A4%A7%E5%8E%9F%E5%88%99/"/>
    
    <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>「OOP」UML图</title>
    <link href="http://yoursite.com/2021/04/23/object_oriented/%E3%80%8COO%E3%80%8D-UML%E5%9B%BE/"/>
    <id>http://yoursite.com/2021/04/23/object_oriented/%E3%80%8COO%E3%80%8D-UML%E5%9B%BE/</id>
    <published>2021-04-23T11:18:06.000Z</published>
    <updated>2021-04-27T03:44:39.452Z</updated>
    
    <content type="html"><![CDATA[<p>UML（<code>Unified Modeling Language</code>），统一建模语言。是用来对软件密集系统进行可视化建模的一种语言。</p><h2 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h2><p><img src="https://img.imgdb.cn/item/60856100d1a9ae528f8509d9.jpg"></p><h3 id="类之间的关系"><a href="#类之间的关系" class="headerlink" title="类之间的关系"></a>类之间的关系</h3><h4 id="泛化关系-generalization"><a href="#泛化关系-generalization" class="headerlink" title="泛化关系(generalization)"></a>泛化关系(generalization)</h4><p>类的继承结构表现在UML中为：泛化与实现。</p><p>泛化关系表现为继承非抽象类：（A继承自B）</p><p><img src="https://img.imgdb.cn/item/60855e68d1a9ae528f6d19cd.jpg" alt="uml_gen"></p><h4 id="实现关系-realize"><a href="#实现关系-realize" class="headerlink" title="实现关系(realize)"></a>实现关系(realize)</h4><p>实现关系表现为继承抽象类或实现接口：</p><p><img src="https://img.imgdb.cn/item/60855ee4d1a9ae528f713a04.jpg" alt="uml_realize"></p><h4 id="聚合关系-aggregation"><a href="#聚合关系-aggregation" class="headerlink" title="聚合关系(aggregation)"></a>聚合关系(aggregation)</h4><p>聚合关系用于表示实体对象之间的关系，表示整体由部分构成的语义。例如：一个部门由多个员工组成。</p><p>与组合关系不同的是，整体和部分不是强依赖的，即使整体不存在了，部分仍然存在。例如， 部门撤销了，人员不会消失，他们依然存在。</p><p>下图表示B由A组成：</p><p><img src="https://img.imgdb.cn/item/60855f55d1a9ae528f7527f8.jpg"></p><h4 id="组合关系-composition"><a href="#组合关系-composition" class="headerlink" title="组合关系(composition)"></a>组合关系(composition)</h4><p>组合关系是一种强依赖的特殊聚合关系，如果整体不存在了，则部分也不存在。例如，公司不存在了，部门也将不存在了。</p><p><img src="https://img.imgdb.cn/item/60855fb4d1a9ae528f787e31.jpg"></p><h4 id="关联关系-association"><a href="#关联关系-association" class="headerlink" title="关联关系(association)"></a>关联关系(association)</h4><p>一般用来定义对象之间静态的、天然的结构。关联关系是一种“强关联”的关系。例如：乘车人和车票之间、学生和学校都是一种关联关系。</p><p>用一条直线表示。</p><h4 id="依赖关系-dependency"><a href="#依赖关系-dependency" class="headerlink" title="依赖关系(dependency)"></a>依赖关系(dependency)</h4><p>描述一个对象在运行期间会用到另一个对象的关系。</p><p>与关联关系不同的是，它是一种临时性的关系，通常在运行期间产生，并且随着运行时的变化，依赖关系也可能发生变化。</p><p>依赖也有方向，双向依赖是一种非常糟糕的结构，我们应该保持单向依赖，杜绝双向依赖的产生。</p><p>注：在最终代码中，依赖关系体现为类构造方法及类方法的传入参数，箭头的指向为调用关系；依赖关系除了临时知道对方外，还有“使用”对方的方法和属性。</p><p>下图表示A依赖于B：</p><p><img src="https://img.imgdb.cn/item/608560cbd1a9ae528f82fee1.jpg"></p><h2 id="UML时序图（顺序图）"><a href="#UML时序图（顺序图）" class="headerlink" title="UML时序图（顺序图）"></a>UML时序图（顺序图）</h2><p>时序图(<code>Sequence Diagram</code>)，又名序列图、循序图，是一种UML交互图。它通过描述对象之间发送消息的时间顺序显示多个对象之间的动态协作。</p><p><img src="https://img.imgdb.cn/item/60856504d1a9ae528fad75f5.jpg"></p><h3 id="元素"><a href="#元素" class="headerlink" title="元素"></a>元素</h3><h4 id="角色-Actor"><a href="#角色-Actor" class="headerlink" title="角色(Actor)"></a>角色(Actor)</h4><p>系统角色，可以是人或者其他系统，子系统。以一个小人图标表示。</p><h4 id="对象-Object"><a href="#对象-Object" class="headerlink" title="对象(Object)"></a>对象(Object)</h4><p>位于时序图的顶部，以一个矩形表示。</p><h4 id="生命线-LifeLine"><a href="#生命线-LifeLine" class="headerlink" title="生命线(LifeLine)"></a>生命线(LifeLine)</h4><p>时序图中每个对象和底部中心都有一条垂直的虚线，即对象的生命线(对象的时间线)。</p><h4 id="消息-Message"><a href="#消息-Message" class="headerlink" title="消息(Message)"></a>消息(Message)</h4><p>表现代表对象之间发送的信息。消息分为三种类型。</p><ul><li><p><strong>同步消息(Synchronous Message)</strong></p><p>消息的发送者把信号传递给消息的接收者，然后停止活动，等待消息的接收者放弃或者返回控制。以一条实线+实心箭头表示。</p></li><li><p><strong>异步消息(Asynchronous Message)</strong></p><p>消息发送者通过消息把信号传递给消息的接收者，然后继续自己的活动，不等待接受者返回消息。以<code>-&gt;</code>表示。</p></li><li><p><strong>返回消息(Return Message)</strong></p><p>表示从过程调用返回。以<code>&lt;---</code>表示</p></li></ul><h4 id="自关联消息"><a href="#自关联消息" class="headerlink" title="自关联消息"></a>自关联消息</h4><p>表示方法的自身调用或者一个对象内的一个方法调用另外一个方法。以一个半闭合的长方形+下方实心剪头表示。</p><h4 id="组合片段"><a href="#组合片段" class="headerlink" title="组合片段"></a>组合片段</h4><p>组合片段用来解决交互执行的条件和方式，它允许在序列图中直接表示逻辑组件，用于通过指定条件或子进程的应用区域，为任何生命线的任何部分定义特殊条件和子进程。</p><hr><p>附：</p><ul><li><a href="https://plantuml.com/zh/sequence-diagram">https://plantuml.com/zh/sequence-diagram</a> 一个可online根据代码生成时序图的网站</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;UML（&lt;code&gt;Unified Modeling Language&lt;/code&gt;），统一建模语言。是用来对软件密集系统进行可视化建模的一种语言。&lt;/p&gt;
&lt;h2 id=&quot;UML类图&quot;&gt;&lt;a href=&quot;#UML类图&quot; class=&quot;headerlink&quot; title=&quot;</summary>
      
    
    
    
    <category term="ObjectOriented" scheme="http://yoursite.com/categories/ObjectOriented/"/>
    
    
    <category term="OO" scheme="http://yoursite.com/tags/OO/"/>
    
    <category term="UML" scheme="http://yoursite.com/tags/UML/"/>
    
  </entry>
  
  <entry>
    <title>「OS」Pre</title>
    <link href="http://yoursite.com/2021/04/20/OperatingSystem/OS-1/"/>
    <id>http://yoursite.com/2021/04/20/OperatingSystem/OS-1/</id>
    <published>2021-04-20T12:54:47.000Z</published>
    <updated>2021-04-27T04:03:19.618Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-操作系统的启动"><a href="#1-操作系统的启动" class="headerlink" title="1. 操作系统的启动"></a>1. 操作系统的启动</h1><ol><li>将硬件初始化的相关工作从操作系统中抽出放在bootloader中实现，意味着通过这种方式实现了硬件启动和软件启动的分离。 因此需要存储在非易失性存储器中的硬件启动相关指令不需要很多，能够很容易地保存在ROM或FLASH中。</li><li>bootloader在硬件初始化完后，需要为软件启动（即操作系统内核的功能）做相应的准备， 比如需要将内核镜像文件从存放它的存储器（比如磁盘）中读到RAM中。既然bootloader需要将内核镜像文件加载到内存中， 那么它就能选择使用哪一个内核镜像进行加载，即实现多重开机的功能。使用bootloader后，我们就能够在一个硬件上运行多个操作系统了。</li><li>bootloader主要负责硬件启动相关工作，同时操作系统内核则能够专注于软件启动以及对用户提供服务的工作， 从而降低了硬件相关代码和软件相关代码的耦合度，有助于操作系统的移植。需要注意的是这样做并不意味着操作系统不依赖硬件。 由于操作系统直接管理着计算机所有的硬件资源，要想操作系统完全独立于处理器架构和硬件平台显然是不切实际的。 然而使用bootloader更清晰地划分了硬件启动和软件启动的边界，使操作系统与硬件交互的抽象层次提高了，从而简化了操作系统的开发和移植工作。</li></ol><p>待更。。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-操作系统的启动&quot;&gt;&lt;a href=&quot;#1-操作系统的启动&quot; class=&quot;headerlink&quot; title=&quot;1. 操作系统的启动&quot;&gt;&lt;/a&gt;1. 操作系统的启动&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;将硬件初始化的相关工作从操作系统中抽出放在bootloader中实现</summary>
      
    
    
    
    <category term="OperatingSystem" scheme="http://yoursite.com/categories/OperatingSystem/"/>
    
    
    <category term="OS" scheme="http://yoursite.com/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>「Linux 基本工具」GCC &amp; make</title>
    <link href="http://yoursite.com/2021/03/15/Linux/Linux%E5%9F%BA%E6%9C%AC%E5%B7%A5%E5%85%B7-GCC/"/>
    <id>http://yoursite.com/2021/03/15/Linux/Linux%E5%9F%BA%E6%9C%AC%E5%B7%A5%E5%85%B7-GCC/</id>
    <published>2021-03-15T01:21:15.000Z</published>
    <updated>2021-04-25T07:03:26.961Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h1><h2 id="GCC-amp-Clang"><a href="#GCC-amp-Clang" class="headerlink" title="GCC &amp; Clang"></a>GCC &amp; Clang</h2><p>编译器是翻译代码为计算机语言的一个工具，我们平时写的代码如果想在某个特定的计算机上执行（计算机的<code>cpu</code>构架不同），就需要编译器来对代码进行编译汇编链接，而汇编和链接的过程对于每个不同的平台上过程都不一样。</p><p><code>gcc</code>、<code>clang</code>是两个编译器，用于将高级编程语言，编译汇编链接成机器语言。</p><ul><li><code>GCC</code> → <code>GNU Compiler Collection</code>，也称GNU编译器套件，可编译许多种语言（<code>C/C++</code>, <code>Java</code>等）<ul><li><code>gcc</code>（<code>GUN C Compiler</code>）是GCC中的c编译器</li><li><code>g++</code>（<code>GUN C++ Compiler</code>）是GCC中的c++编译器。（两者都可以编译c和cpp文件，但存在差异）</li></ul></li><li><code>Clang</code> → 一个支持编译<code>C/C++/Objective-C</code>语言的轻量级编译器。</li></ul><h2 id="make-amp-cmake"><a href="#make-amp-cmake" class="headerlink" title="make &amp; cmake"></a>make &amp; cmake</h2><p><code>make</code>和<code>cmake</code>是搭配编译器来方便用户进行多文件编译而发明的工具。<code>IDE</code>的编译功能就包括实现了这些操作。</p><ul><li><code>make</code> → 相当于一个智能的批处理工具，本身没有编译和链接的功能，而是用类似于批处理的方式通过调用<code>Makefile</code>文件中用户指定的命令来进行编译和链接。</li><li><code>cmake</code> → 用于更方便地生成<code>makefile</code>文件给<code>make</code>用，<code>cmake</code>还可以跨平台生成对应平台能用的<code>makefile</code>。</li><li><code>CMakeLists.txt</code> → <code>cmake</code>根据<code>CMakeLists.txt</code>文件（组态档）去生成<code>makefile</code>；我们使用IDE时，会自动生成各种<code>CMakeLists.txt</code>。</li></ul><h2 id="编译器编译流程"><a href="#编译器编译流程" class="headerlink" title="编译器编译流程"></a>编译器编译流程</h2><p><code>gcc/g++</code> 在执行编译工作时，需：</p><ol><li><strong>预处理</strong>，生成 <code>.i </code>的文件 [ 预处理器<code>cpp</code> ]</li><li>将预处理后的文件<strong>转换成汇编</strong>语言, 生成文件 <code>.s</code>  [ 编译器<code>egcs</code> ]</li><li>由汇编变为<strong>机器码</strong>，生成 <code>.o</code> 的文件  [ 汇编器<code>as</code> ]</li><li>链接目标代码, 生成<strong>可执行程序</strong> [ 链接器<code>ld</code> ]</li></ol><hr><h1 id="gcc使用"><a href="#gcc使用" class="headerlink" title="gcc使用"></a>gcc使用</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法:gcc [选项]... [参数]...</span><br></pre></td></tr></table></figure><h3 id="选项（常用）："><a href="#选项（常用）：" class="headerlink" title="选项（常用）："></a>选项（常用）：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-o      指定生成的输出文件</span><br><span class="line">-S      将C代码转换为汇编代码</span><br><span class="line">-Wall   显示警告信息</span><br><span class="line">-c      仅执行编译操作，不进行链接操作</span><br><span class="line">-M      列出依赖        </span><br><span class="line">-include filename   编译时用来包含头文件，功能相当于在代码中使用#include&lt;filename&gt;   </span><br><span class="line">-Ipath   编译时指定头文件目录，使用标准库时不需要指定目录，-I参数可以用相对路径，比如头文件在当前目录，可以用-I.来指定   </span><br></pre></td></tr></table></figure><h3 id="参数："><a href="#参数：" class="headerlink" title="参数："></a>参数：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C源文件：指定C语言源代码文件</span><br></pre></td></tr></table></figure><h3 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h3><ol><li>如果想要同时编译多个文件，可以直接用<code>-o</code>选项将多个文件进行编译连接：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc testfun.c test.c -o <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>也可以先使用<code>-c</code>选项将每个文件单独编译成<code>.o</code>文件，再用<code>-o</code>选项将多个<code>.o</code>文件进行连接：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -c testfun.c -&gt; gcc -c test.c -&gt; gcc testfun.o test.o -o <span class="built_in">test</span></span><br></pre></td></tr></table></figure><ol start="2"><li>其他操作</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ gcc test.c</span><br><span class="line">#默认生成名为a.out的可执行文件</span><br><span class="line">#Windows平台为a.exe</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ gcc test.c -o test</span><br><span class="line">#使用-o选项生成名为test的可执行文件</span><br></pre></td></tr></table></figure><hr><h1 id="Makefile"><a href="#Makefile" class="headerlink" title="Makefile"></a>Makefile</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前置知识&quot;&gt;&lt;a href=&quot;#前置知识&quot; class=&quot;headerlink&quot; title=&quot;前置知识&quot;&gt;&lt;/a&gt;前置知识&lt;/h1&gt;&lt;h2 id=&quot;GCC-amp-Clang&quot;&gt;&lt;a href=&quot;#GCC-amp-Clang&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="Linux 基础" scheme="http://yoursite.com/categories/Linux-%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
    <category term="GCC" scheme="http://yoursite.com/tags/GCC/"/>
    
    <category term="MakeFile" scheme="http://yoursite.com/tags/MakeFile/"/>
    
  </entry>
  
  <entry>
    <title>「Linux 基本工具」Vim</title>
    <link href="http://yoursite.com/2021/03/10/Linux/Linux%E5%9F%BA%E6%9C%AC%E5%B7%A5%E5%85%B7-Vim/"/>
    <id>http://yoursite.com/2021/03/10/Linux/Linux%E5%9F%BA%E6%9C%AC%E5%B7%A5%E5%85%B7-Vim/</id>
    <published>2021-03-10T11:21:15.000Z</published>
    <updated>2021-04-27T04:37:31.333Z</updated>
    
    <content type="html"><![CDATA[<p><strong>常用操作：</strong></p><p><img src="https://img.imgdb.cn/item/608794f5d1a9ae528fb950b8.jpg" alt="屏幕截图 2021-03-15 091327.jpg"></p><p>若想对vim进行永久的格式设置，可修改绝对路径<code>~/.vimrc</code>下的内容。例如想要对vim进行永久的行号显示设置，可在该文件内增添<code>set nu</code>或<code>:set nu</code> </p><h2 id="各种插入模式"><a href="#各种插入模式" class="headerlink" title="各种插入模式"></a>各种插入模式</h2><blockquote><ul><li><code>a</code> → 在光标后插入</li><li><code>o</code> → 在当前行后插入一个新行</li><li><code>O</code> → 在当前行前插入一个新行</li><li><code>cw</code> → 替换从光标所在位置后到一个单词结尾的字符</li></ul></blockquote><h2 id="拷贝"><a href="#拷贝" class="headerlink" title="拷贝"></a>拷贝</h2><blockquote><p>除了y可以拷贝，以下也可</p><ul><li><code>d</code> (删除 )</li><li><code>v</code> (可视化，先按v，然后移动光标可以选中文本)</li><li><code>gU</code> (变大写)</li><li><code>gu</code> (变小写)</li></ul></blockquote><h2 id="移动光标"><a href="#移动光标" class="headerlink" title="移动光标"></a>移动光标</h2><blockquote><ul><li><p><code>0</code> → 到行头</p></li><li><p><code>^</code> → 到本行第一个不是blank字符的位置（所谓blank字符就是空格，tab，换行，回车等）</p></li><li><p><code>$</code> → 到本行行尾</p></li><li><p><code>g_</code> → 到本行最后一个不是blank字符的位置。</p></li><li><p><code>w/W</code> → 到下一个单词的开头。( 程序变量用小写，程序语句用大写 )</p></li><li><p><code>e/E</code> → 到下一个单词的结尾。</p></li><li><p><code>%</code> : 匹配括号移动，包括 <code>(</code>, <code>&#123;</code>, <code>[</code>. （需要把光标先移到括号上）</p></li><li><p><code>*</code> 和 <code>#</code>:  匹配光标当前所在的单词，移动光标到下一个（或上一个）匹配单词（*是下一个，#是上一个，<code>2#</code>是上两个）</p></li><li><p><code>fa</code> → 到下一个为a的字符处，你也可以fs到下一个为s的字符。</p></li><li><p><code>t,</code> → 到逗号前的第一个字符。逗号可以变成其它字符。</p></li><li><p><code>3fa</code> → 在当前行查找第三个出现的a。（<code>F</code> 和 <code>T</code> → 和 <code>f</code> 和 <code>t</code> 一样，只不过是相反方向。）</p></li></ul></blockquote><h2 id="打开-保存-退出-改变文件"><a href="#打开-保存-退出-改变文件" class="headerlink" title="打开/保存/退出/改变文件"></a>打开/保存/退出/改变文件</h2><blockquote><ul><li><code>:e &lt;path/to/file&gt;</code> → 打开一个文件</li><li><code>:w</code> → 存盘</li><li><code>:saveas &lt;path/to/file&gt;</code> → 另存为 <code>&lt;path/to/file&gt;</code></li><li><code>:x</code>， <code>ZZ</code> 或 <code>:wq</code> → 保存并退出 (<code>:x</code> 表示仅在需要时保存，ZZ不需要输入冒号并回车)</li><li><code>:q!</code> → 退出不保存 <code>:qa!</code> 强行退出所有的正在编辑的文件，就算别的文件有更改。</li><li><code>:bn</code> 和 <code>:bp</code> → 你可以同时打开很多文件，使用这两个命令来切换下一个或上一个文件。（陈皓注：我喜欢使用:n到下一个文件）</li></ul></blockquote><h2 id="批量输入"><a href="#批量输入" class="headerlink" title="批量输入"></a>批量输入</h2><blockquote><ul><li><code>100idesu [ESC]</code>  →  100行<code>desu</code></li><li><code>.</code> → 重复上一个命令—— 100 <code>&quot;desu&quot;</code></li><li><code>3.</code> → 重复 3 次 <code>“desu”</code> ( 注意：不是 300 )</li></ul></blockquote><h2 id="连招"><a href="#连招" class="headerlink" title="连招"></a>连招</h2><blockquote><p>很多命令都可以和移动光标的命令连动，<code>&lt;start position&gt;&lt;command&gt;&lt;end position&gt;</code></p><ul><li><code>0y$</code>  →  先到行头，从行头拷贝到本行最后一个字符</li><li><code>ye</code>  →  从当前位置拷贝到本单词最后一个字符</li></ul></blockquote><p>（未完待续 。。。<a href="https://coolshell.cn/articles/5426.html#%E7%AC%AC%E5%9B%9B%E7%BA%A7_%E2%80%93_Vim_%E8%B6%85%E8%83%BD%E5%8A%9B">参考博客</a>）</p><hr><h1 id="Nano"><a href="#Nano" class="headerlink" title="Nano"></a>Nano</h1><p>除Vim外，这款编辑器功能简单，上手较为容易。</p><p><img src="https://i.loli.net/2021/03/15/6mUNwJCxO1EhGsd.jpg" alt="屏幕截图 2021-03-15 102012.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;常用操作：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img.imgdb.cn/item/608794f5d1a9ae528fb950b8.jpg&quot; alt=&quot;屏幕截图 2021-03-15 091327.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;</summary>
      
    
    
    
    <category term="Linux 基础" scheme="http://yoursite.com/categories/Linux-%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
    <category term="Vim" scheme="http://yoursite.com/tags/Vim/"/>
    
  </entry>
  
  <entry>
    <title>「Linux 基础」Shell</title>
    <link href="http://yoursite.com/2021/03/09/Linux/linux%20Shell/"/>
    <id>http://yoursite.com/2021/03/09/Linux/linux%20Shell/</id>
    <published>2021-03-09T01:21:15.000Z</published>
    <updated>2021-03-15T09:00:16.574Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Shell-前置知识"><a href="#Shell-前置知识" class="headerlink" title="Shell 前置知识"></a>Shell 前置知识</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Shell是一个用C语言编写的程序，用户通过这个界面访问操作系统内核的服务。</p><p>Sell 脚本（shell script）是一种为shell编写的脚本程序，通常也称为shell。</p><h2 id="Shell-环境"><a href="#Shell-环境" class="headerlink" title="Shell 环境"></a>Shell 环境</h2><p>Linux 的 Shell 种类众多，常见的有：</p><ul><li>Bourne Shell（/usr/bin/sh或/bin/sh）</li><li>Bourne Again Shell（/bin/bash）</li><li>C Shell（/usr/bin/csh）</li><li>…</li></ul><p>Bash易用免费，使用广泛，并且也是多数Linux系统默认的Shell</p><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p><code>test.sh</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">echo “Hello World”</span><br></pre></td></tr></table></figure><ul><li><code>#!</code>表明这个脚本需要什么解释器执行</li></ul><h3 id="1-作为可执行程序"><a href="#1-作为可执行程序" class="headerlink" title="1. 作为可执行程序"></a>1. 作为可执行程序</h3><p>cd到对应目录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod +x ./test.sh  #使脚本具有执行权限</span><br><span class="line">./test.sh  #执行脚本</span><br></pre></td></tr></table></figure><h3 id="2-作为解释器参数"><a href="#2-作为解释器参数" class="headerlink" title="2. 作为解释器参数"></a>2. 作为解释器参数</h3><p>直接运行解释器，参数即shell脚本的文件名（脚本内无需在第一行指定解释器信息）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/sh test.sh</span><br></pre></td></tr></table></figure><h1 id="Shell-基础"><a href="#Shell-基础" class="headerlink" title="Shell 基础"></a>Shell 基础</h1><h2 id="1-Shell-变量"><a href="#1-Shell-变量" class="headerlink" title="1. Shell 变量"></a>1. Shell 变量</h2><h3 id="1-1-定义变量"><a href="#1-1-定义变量" class="headerlink" title="1.1 定义变量"></a>1.1 定义变量</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">variable_name = “shell”</span><br></pre></td></tr></table></figure><ul><li>变量名和等号之间不能有空格</li></ul><h3 id="1-2-使用变量"><a href="#1-2-使用变量" class="headerlink" title="1.2 使用变量"></a>1.2 使用变量</h3><p>使用一个定义过的变量，在变量名前加<code>$</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo $variable_name</span><br><span class="line">Echo $&#123;variable_name&#125;</span><br></pre></td></tr></table></figure><ul><li><code>&#123;&#125;</code>帮助解释器识别变量边界</li></ul><h2 id="2-Shell-字符串"><a href="#2-Shell-字符串" class="headerlink" title="2. Shell 字符串"></a>2. Shell 字符串</h2><p><strong>单引号：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str = ‘string’</span><br></pre></td></tr></table></figure><ul><li>单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的；</li><li>单引号字串中不能出现单引号</li></ul><p><strong>双引号：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">your_name=&#x27;dhy&#x27;</span><br><span class="line">str=&quot;Hello, I know your are \&quot;$your_name\&quot;! \n&quot;</span><br></pre></td></tr></table></figure><ul><li>双引号里可以有变量</li><li>双引号里可以出现转义字符</li></ul><p><strong>拼接字符串</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">your_name=&quot;dhy&quot;</span><br><span class="line">greeting=&quot;hello, &quot;$your_name&quot; !&quot;</span><br><span class="line">greeting_1=&quot;hello, $&#123;your_name&#125; !&quot;</span><br><span class="line">echo $greeting $greeting_1</span><br></pre></td></tr></table></figure><p><strong>获取字符串长度</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string=&quot;abcd&quot;</span><br><span class="line">echo $&#123;#string&#125; #输出 4</span><br></pre></td></tr></table></figure><p><strong>提取子字符串</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string=&quot;alibaba is a great company&quot;</span><br><span class="line">echo $&#123;string:1:4&#125; #输出liba</span><br></pre></td></tr></table></figure><p><strong>查找子字符串</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string=&quot;alibaba is a great company&quot;</span><br><span class="line">echo `expr index &quot;$string&quot; is`</span><br></pre></td></tr></table></figure><h2 id="3-Shell-数组"><a href="#3-Shell-数组" class="headerlink" title="3. Shell 数组"></a>3. Shell 数组</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Shell-前置知识&quot;&gt;&lt;a href=&quot;#Shell-前置知识&quot; class=&quot;headerlink&quot; title=&quot;Shell 前置知识&quot;&gt;&lt;/a&gt;Shell 前置知识&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="Linux 基础" scheme="http://yoursite.com/categories/Linux-%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
    <category term="Shell" scheme="http://yoursite.com/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>「Linux 基础」基本操作命令</title>
    <link href="http://yoursite.com/2021/03/08/Linux/Linux%E5%9F%BA%E7%A1%80-%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2021/03/08/Linux/Linux%E5%9F%BA%E7%A1%80-%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4/</id>
    <published>2021-03-08T01:00:15.000Z</published>
    <updated>2021-03-16T05:12:20.605Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目录-文件"><a href="#目录-文件" class="headerlink" title="目录/文件"></a>目录/文件</h2><h3 id="查"><a href="#查" class="headerlink" title="查"></a>查</h3><ul><li><p><code>ls - list directory contents</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ls [选项]... [文件]...</span><br><span class="line">选项（常用）：</span><br><span class="line">        -a      不隐藏任何以<span class="string">&quot;.&quot;</span>开始的项目</span><br><span class="line">        -l      每行只列出一个文件</span><br></pre></td></tr></table></figure></li><li><p><code>tree</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tree [选项] [目录名]</span><br><span class="line">    选项(常用)：</span><br><span class="line">        -a 列出全部文件</span><br><span class="line">        -d 只列出目录</span><br></pre></td></tr></table></figure></li><li><p><code>cat - concatenate files and print</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cat [选项]... [文件]...</span><br><span class="line">选项（常用）：</span><br><span class="line">-n      对输出的所有行编号</span><br></pre></td></tr></table></figure></li></ul><h3 id="增"><a href="#增" class="headerlink" title="增"></a>增</h3><ul><li><code>mkdir - make directories</code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir [选项]... 目录...</span><br></pre></td></tr></table></figure></li></ul><h3 id="删"><a href="#删" class="headerlink" title="删"></a>删</h3><ul><li><p><code>rmdir - remove empty directories</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rmdir [选项]... 目录...</span><br></pre></td></tr></table></figure><p>只有空目录才可以使用 <code>rmdir</code> 命令删除。</p></li><li><p><code>rm - remove files or directories</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rm [选项]... 文件...</span><br><span class="line">选项（常用）：</span><br><span class="line">-r      递归删除目录及其内容</span><br><span class="line">-f      强制删除。忽略不存在的文件，不提示确认</span><br><span class="line">-i    需要确认，在使用文件扩展名删除多文件时有用</span><br></pre></td></tr></table></figure></li></ul><h3 id="处理文件"><a href="#处理文件" class="headerlink" title="处理文件"></a>处理文件</h3><ul><li><code>sed</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">sed [选项] 命令 输入文本      </span><br><span class="line">    选项(常用):</span><br><span class="line">        -n:使用安静模式。在一般sed的用法中，输入文本的所有内容都会被输出。加上-n参数后，则只有经过sed 处理的内容才会被显示。</span><br><span class="line">        -e: 进行多项编辑，即对输入行应用多条sed命令时使用。</span><br><span class="line">        -i:直接修改读取的档案内容，而不是输出到屏幕。使用时应小心。       </span><br><span class="line">        </span><br><span class="line">    命令(常用)：</span><br><span class="line">        a :新增，a后紧接着\，在当前行的后面添加一行文本</span><br><span class="line">        c :取代，c后紧接着\，用新的文本取代本行的文本</span><br><span class="line">        i :插入，i后紧接着\，在当前行的上面插入一行文本</span><br><span class="line">        d :删除，删除当前行的内容</span><br><span class="line">        p :显示，把选择的内容输出。通常 p 会与参数 sed -n 一起使用。</span><br><span class="line">        s :取代，格式为s/re/string，re表示正则表达式，string为字符串，功能为将正则表达式替换为字符串。</span><br></pre></td></tr></table></figure><p>例：</p><p>输出my.txt的第三行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -n <span class="string">&#x27;3p&#x27;</span> my.txt </span><br></pre></td></tr></table></figure><p>删除my.txt文件的第二行到最后一行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed <span class="string">&#x27;2,$d&#x27;</span> my.txt </span><br></pre></td></tr></table></figure><p>在整行范围内把str1替换为str2。如果没有g标记，则只有每行第一个匹配的str1被替换成str2。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed <span class="string">&#x27;s/str1/str2/g&#x27;</span> my.txt</span><br></pre></td></tr></table></figure><p><code> -e</code>选项允许在同一行里执行多条命令。例子的第一条是第四行后添加一个<code>str</code>，第二个命令是将<code>str</code>替换为<code>aaa</code>。命令的执行顺序对结果有影响。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -e <span class="string">&#x27;4a\str &#x27;</span> -e <span class="string">&#x27;s/str/aaa/&#x27;</span> my.txt </span><br></pre></td></tr></table></figure><p>双引号内可以使用变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!bin/bash</span></span><br><span class="line">sed -i <span class="string">&quot;s/<span class="variable">$2</span>/<span class="variable">$3</span>/g&quot;</span> <span class="variable">$1</span></span><br></pre></td></tr></table></figure><ul><li><code>awk</code> : 文本分析工具</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">&#x27;pattern action&#x27;</span> file</span><br><span class="line">- pattern为条件，action为命令</span><br><span class="line">- <span class="variable">$n</span>代表每一行中用分隔符分隔后的第n项，默认分隔符为<span class="string">&#x27; &#x27;</span></span><br></pre></td></tr></table></figure><p>例：</p><p>所有第一项大于2的行，输出第一项和第三项：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">&#x27;$1&gt;2 &#123;print $1,$3&#125;&#x27;</span> my.txt</span><br></pre></td></tr></table></figure><p><code>-F指定分割的字符</code>，则输出用<code>,</code>分隔的第二项：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk -F, <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>  my.txt</span><br></pre></td></tr></table></figure><h3 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h3><ul><li><code>cp - copy files and directories</code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cp [选项]... 源文件... 目录</span><br><span class="line">选项（常用）：</span><br><span class="line">        -r      递归复制目录及其子目录内的所有内容</span><br></pre></td></tr></table></figure></li></ul><h3 id="移动"><a href="#移动" class="headerlink" title="移动"></a>移动</h3><ul><li><code>mv - move/rename file</code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv [选项]... 源文件... 目录</span><br></pre></td></tr></table></figure><code>mv file ../file_mv</code> → 移动至上一层并重命名。因此重命名文件也可使用<code>mv</code>操作</li></ul><h3 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h3><ul><li><code>diff</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">diff [选项] 文件1 文件2</span><br><span class="line">    常用选项:</span><br><span class="line">        -b 不检查空格字符的不同</span><br><span class="line">        -B 不检查空行</span><br><span class="line">        -q 仅显示有无差异，不显示详细信息</span><br></pre></td></tr></table></figure><h3 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h3><p>Linux的文件调用权限分为三级 : 文件拥有者、群组、其他。利用 <code>chmod</code> 可以藉以控制文件如何被他人所调</p><ul><li><code>chmod</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chmod 权限设定字串 文件...</span><br><span class="line">    权限设定字串格式 :</span><br><span class="line">    [ugoa...][[+-=][rwxX]...][,...]</span><br></pre></td></tr></table></figure><p>u 表示该文件的拥有者，g 表示与该文件的拥有者属于同一个群组，o 表示其他以外的人，a 表示这三者皆是。</p><p>+ 表示增加权限、- 表示取消权限、= 表示唯一设定权限。</p><p>r 表示可读取，w 表示可写入，x 表示可执行，X 表示只有当该文件是个子目录或者该文件已经被设定过为可执行。</p><p>此外<code>chmod</code>也可以用数字来表示权限，格式为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod abc 文件</span><br></pre></td></tr></table></figure><p>abc为三个数字，分别表示拥有者，群组，其他人的权限。<code>r=4，w=2，x=1</code>，用这些数字的加和来表示权限。例如：<code>chmod 777 file</code>和<code>chmod a=rwx file</code>效果相同。</p><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>shell使用三种流：</p><ul><li>标准输入：stdin ，由0表示</li><li>标准输出：stdout，由1表示</li><li>标准错误：stderr，由2表示</li></ul><p>重定向和管道可以重定向以上的流。</p><h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><ul><li><code>&gt;</code></li></ul><p>改变送出的数据信道，使<code>&gt;</code>前命令的输出数据输出到<code>&gt;</code>后指定的文件中去。</p><ul><li><code>&gt;&gt;</code></li></ul><p>重定向追加输出，将<code>&gt;&gt;</code>前命令的输出数据追加输出到<code>&gt;&gt;</code>后指定的文件中去</p><ul><li><code>&lt;</code></li></ul><p>重定向输入，将<code>&lt;</code>后指定的文件中的数据输入到<code>&lt;</code>前的命令中</p><ul><li>三种流可同时重定向</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">command</span> &lt; input.txt 1&gt;output.txt 2&gt;err.txt</span><br></pre></td></tr></table></figure><h3 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h3><ul><li><code>|</code></li></ul><p>可以连接命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">command1 | command2 | command3 | ...</span><br></pre></td></tr></table></figure><p>以上内容是将<code>command1</code>的<code>stdout</code>发给<code>command2</code>的<code>stdin</code>，<code>command2</code>的<code>stdout</code>发给<code>command3</code>的<code>stdin</code>，依此类推。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat &lt; my.sh | grep <span class="string">&quot;Hello&quot;</span> &gt; output.txt<span class="string">&quot; </span></span><br></pre></td></tr></table></figure><p>上述命令将my.sh的内容作为cat指令标准输入，cat指令stdout发给grep指令的stdin，grep在其中查找字符串，最后将结果输出到output.txt。</p><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><ul><li><p><code>find - search for files in a directory hierarchy</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">find -name 文件名</span><br><span class="line">-name 选项可以在当前目录下递归地查找符合参数所示文件名的文件，并将文件的路径输出至屏幕上。</span><br><span class="line">find -name <span class="string">&quot;*.py&quot;</span></span><br><span class="line">find . -name <span class="string">&quot;test*&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><code>locate</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">locate [选项] 文件名</span><br></pre></td></tr></table></figure></li></ul><p>locate也是查找文件的指令，与find的不同之处在于: find 是去硬盘找，locate 只在<code>/var/lib/slocate</code>资料库中找。locate的速度比find快，它并不是真的查找文件，而是查数据库，所以locate的查找并不是实时的，而是以数据库的更新为准，一般是系统自己维护，也可以手工升级数据库。</p><ul><li><code>grep - print lines matching a pattern</code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">grep [选项]... PATTERN [FILE]...</span><br><span class="line">选项（常用）：</span><br><span class="line">        -a      不忽略二进制数据进行搜索</span><br><span class="line">        -i      忽略文件大小写差异</span><br><span class="line">        -r      从文件夹递归查找</span><br><span class="line">        -n      显示行号</span><br><span class="line">grep -n <span class="built_in">echo</span> <span class="built_in">test</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><ul><li><code>Ctrl+C</code> 终止当前程序的执行。</li><li><code>Ctrl+Z</code> 挂起当前程序（挂起程序后会显示该程序挂起编号，若想要恢复该程序可以使用 <code>fg [job_spec]</code> 即可，<code>job_spec</code>即为挂起编号，不输入时默认为最近挂起进程）</li><li><code>Ctrl+D</code> 终止输入（若正在使用Shell，则退出当前Shell）</li><li><code>Ctrl+I</code> 清屏</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;目录-文件&quot;&gt;&lt;a href=&quot;#目录-文件&quot; class=&quot;headerlink&quot; title=&quot;目录/文件&quot;&gt;&lt;/a&gt;目录/文件&lt;/h2&gt;&lt;h3 id=&quot;查&quot;&gt;&lt;a href=&quot;#查&quot; class=&quot;headerlink&quot; title=&quot;查&quot;&gt;&lt;/a&gt;查&lt;/h</summary>
      
    
    
    
    <category term="Linux 基础" scheme="http://yoursite.com/categories/Linux-%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>「Linux 基础」背景</title>
    <link href="http://yoursite.com/2021/03/08/Linux/linux%E8%83%8C%E6%99%AF/"/>
    <id>http://yoursite.com/2021/03/08/Linux/linux%E8%83%8C%E6%99%AF/</id>
    <published>2021-03-08T00:21:15.000Z</published>
    <updated>2021-03-15T08:56:48.508Z</updated>
    
    <content type="html"><![CDATA[<h2 id="UNIX和Linux的关系"><a href="#UNIX和Linux的关系" class="headerlink" title="UNIX和Linux的关系"></a>UNIX和Linux的关系</h2><p>Linux 是一个类 Unix 的操作系统，是一个基于POSIX和UNIX的多用户、多任务、支持多线程和多CPU的操作系统。Unix 要早于 Linux。</p><p>两者之间的区别：</p><ul><li><p>UNIX 系统大多是与硬件配套的，也就是说，大多数 UNIX 系统如 AIX、HP-UX 等是无法安装在 x86 服务器和个人计算机上的，而 Linux 则可以运行在多种硬件平台上</p></li><li><p>UNIX 是商业软件，而 Linux 是开源软件，是免费、公开源代码的</p></li></ul><h2 id="系统结构"><a href="#系统结构" class="headerlink" title="系统结构"></a>系统结构</h2><p>UNIX/Linux系统可以粗糙地抽象为三个层次：</p><p>硬件 -&gt; [ 内核层 -&gt; Shell层 -&gt; 应用层 ] -&gt; 用户</p><h3 id="1）内核层（Kernel）"><a href="#1）内核层（Kernel）" class="headerlink" title="1）内核层（Kernel）"></a>1）内核层（Kernel）</h3><p>内核层是 UNIX/Linux 系统的核心和基础，它直接附着在硬件平台之上，控制和管理系统内各种资源（硬件资源和软件资源），有效地组织进程的运行，从而扩展硬件的功能，提高资源的利用效率，为用户提供方便、高效、安全、可靠的应用环境。</p><h3 id="2）shell层"><a href="#2）shell层" class="headerlink" title="2）shell层"></a>2）shell层</h3><p>命令解释层。用户输入的命令行由shell解释执行并输出相应结果。</p><h3 id="3）应用层"><a href="#3）应用层" class="headerlink" title="3）应用层"></a>3）应用层</h3><p>应用层提供基于 X Window 协议的图形环境。X Window 协议定义了一个系统所必须具备的功能（就如同 TCP/IP 是一个协议，定义软件所应具备的功能）</p><p>现在大多数的 UNIX 系统上（包括 Solaris、HP-UX、AIX 等）都可以运行 CDE （Common Desktop Environment，通用桌面环境，是运行于 UNIX 的商业桌面环境）的用户界面；而在 Linux 上广泛应用的有 Gnome、KDE 等。</p><p>X Window 与微软的 Windows 图形环境有很大的区别：</p><ul><li>UNIX/Linux 系统与 X Window 没有必然捆绑的关系，也就是说，UNIX/Linux 可以安装 X Window，也可以不安装；而微软的 Windows 图形环境与内核捆绑密切。</li><li>UNIX/Linux 系统不依赖图形环境，依然可以通过命令行完成 100% 的功能，而且因为不使用图形环境还会节省大量的系统资源。作为服务器部署，绝大多数 Linux 并不安装或并不启用图形环境</li></ul><h2 id="Linux命令"><a href="#Linux命令" class="headerlink" title="Linux命令"></a>Linux命令</h2><p>Linux命令在系统中有两种类型：内置Shell（外壳）命令和Linux命令。</p><h2 id="Linux的发行版"><a href="#Linux的发行版" class="headerlink" title="Linux的发行版"></a>Linux的发行版</h2><p>即将Linux内核与应用软件进行打包。目前市面上较知名的有：Ubuntu、RedHat、CentOS、Debian、Fedora、SuSE、OpenSUSE、TurboLinux、BluePoint、RedFlag、Xterm、SlackWare等。</p><h2 id="Linux应用领域"><a href="#Linux应用领域" class="headerlink" title="Linux应用领域"></a>Linux应用领域</h2><p>在服务器领域应用广泛。通常服务器使用LAMP（Linux + Apache + MySQL + PHP）或LNMP（Linux + Nginx+ MySQL + PHP）组合。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;UNIX和Linux的关系&quot;&gt;&lt;a href=&quot;#UNIX和Linux的关系&quot; class=&quot;headerlink&quot; title=&quot;UNIX和Linux的关系&quot;&gt;&lt;/a&gt;UNIX和Linux的关系&lt;/h2&gt;&lt;p&gt;Linux 是一个类 Unix 的操作系统，是一个基</summary>
      
    
    
    
    <category term="Linux 基础" scheme="http://yoursite.com/categories/Linux-%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>「OO Lab」自动评测机的搭建</title>
    <link href="http://yoursite.com/2021/03/06/object_oriented/%E3%80%8COO%E3%80%8D-%E8%87%AA%E5%8A%A8%E8%AF%84%E6%B5%8B%E6%9C%BA%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2021/03/06/object_oriented/%E3%80%8COO%E3%80%8D-%E8%87%AA%E5%8A%A8%E8%AF%84%E6%B5%8B%E6%9C%BA%E7%9A%84%E6%90%AD%E5%BB%BA/</id>
    <published>2021-03-06T11:18:06.000Z</published>
    <updated>2021-04-25T12:12:16.528Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="sympy库"><a href="#sympy库" class="headerlink" title="sympy库"></a><code>sympy</code>库</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置自变量为x</span></span><br><span class="line">x = sympy.Symbol(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line"><span class="comment"># 解析表达式</span></span><br><span class="line">f1 = sympy.sympify(<span class="string">&#x27;1-sin(x)**2&#x27;</span>)</span><br><span class="line">f2 = sympy.sympify(<span class="string">&#x27;cos(x)**2&#x27;</span>)</span><br><span class="line"><span class="comment"># 判等， == 有时会出错</span></span><br><span class="line"><span class="built_in">print</span>(f1.equals(f2))</span><br><span class="line"><span class="comment"># 表达式求导</span></span><br><span class="line"><span class="built_in">print</span>(sympy.diff(f1, x))</span><br><span class="line"><span class="built_in">print</span>(sympy.diff(f2, x))</span><br><span class="line"><span class="comment"># 表达式单点求值</span></span><br><span class="line"><span class="built_in">print</span>( f1.evalf(subs=&#123;x:math.pi&#125;) )</span><br></pre></td></tr></table></figure><h3 id="xeger库"><a href="#xeger库" class="headerlink" title="xeger库"></a><code>xeger</code>库</h3><p>根据正则表达式随机生成字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> xeger <span class="keyword">import</span> Xeger</span><br><span class="line">target = Xeger().xeger(<span class="string">&quot;正则表达式&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="subprocess库"><a href="#subprocess库" class="headerlink" title="subprocess库"></a><code>subprocess</code>库</h3><p>创建子进程。<a href="https://blog.csdn.net/wanzheng_96/article/details/102470745?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.control&dist_request_id=&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.control">参考</a></p><ol><li><code>Popen</code> → 创建一个新的进程执行命令，返回一个实例，进行后续操作</li></ol><ul><li><p><code>Popen.poll()</code></p><p>用于检查子进程是否已经结束。</p></li><li><p><code>Popen.wait(timeout=None)</code></p><p>在规定时间内等待进程结束，设置 timeout=None，则一直等待直到结束</p><p>返回：<code>returncode</code></p></li><li><p><code>Popen.communicate(input=None)</code></p><ul><li>与子进程进行交互。向stdin发送数据并关闭它。可选参数input指定发送到子进程的数据，注意 <code>Popen</code>对象的<strong>encoding或者text参数</strong>决定传入字符串还是字节流。</li><li>从<code>stdout</code>和<code>stderr</code>中读取数据, 并关闭。如果没有数据发送到子进程（stdin），则返回一个元组：<code>(stdoutdata, stderrdata)</code>。</li><li>注：如果希望通过进程的<code>stdin</code>向其发送数据，在创建<code>Popen</code>对象的时候，参数<code>stdin</code>必须被设置为<code>PIPE</code>。同样，如果希望从<code>stdout</code>和<code>stderr</code>获取数据，必须将<code>stdout</code>和<code>stderr</code>设置为<code>PIPE</code>。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">subp = subprocess.Popen(command, shell=<span class="literal">True</span>, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE,</span><br><span class="line">                            encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">subp.communicate(data)</span><br><span class="line"><span class="keyword">if</span> subp.poll() == <span class="number">0</span>:</span><br><span class="line">    res = subp.communicate()[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    res = <span class="string">&quot;失败&quot;</span></span><br><span class="line">subp.kill()</span><br></pre></td></tr></table></figure></li><li><p><code>Popen.kill()</code></p><p>在 Posix 操作系统上，此函数给子进程发送 <code>SIGKILL</code> 信号。在 Windows 上， <code>kill()</code> 是 <code>terminate()</code> 的别名。</p></li></ul><h3 id="递归下降语法分析"><a href="#递归下降语法分析" class="headerlink" title="递归下降语法分析"></a>递归下降语法分析</h3><ul><li>形式化表述：<ul><li>表达式 → 空白项 [加减 空白项] 项 空白项 | 表达式 加减 空白项 项 空白项</li><li>项 → [加减 空白项] 因子 | 项 空白项 * 空白项 因子</li><li>因子 → 变量因子 | 常数因子 | 表达式因子</li><li>变量因子 → 幂函数 | 三角函数</li><li>常数因子 → 带符号的整数</li><li>表达式因子 → ‘(‘ 表达式 ‘)’</li><li>三角函数 → sin 空白项 ‘(‘ 空白项 因子 空白项 ‘)’ [空白项 指数] | cos 空白项 ‘(‘ 空白项 因子 空白项 ‘)’ [空白项 指数]</li><li>幂函数 → x [空白项 指数]</li><li>指数 → ** 空白项 带符号的整数</li><li>带符号的整数 → [加减] 允许前导零的整数</li><li>允许前导零的整数 → (0|1|2|…|9){0|1|2|…|9}</li><li>空白字符 → <code>（空格）</code> | <code>\t</code>（水平制表符）</li><li>空白项 → {空白字符}</li><li>加减 → + | -</li></ul></li><li>构建与法分析树：</li></ul><p><img src="https://i.loli.net/2021/03/07/cdqCSgjaXTpMD4F.png" alt="_  1.png"></p><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><h3 id="数据构造"><a href="#数据构造" class="headerlink" title="数据构造"></a>数据构造</h3><ul><li>常量池机制：</li></ul><p>即提前设计好需要使用的常数，存在数组里面，每次需要随机生成常数的时候，随机的不是数而是数组下标。</p><ul><li>构造数据用途分类</li></ul><p><code>sympy</code>库的解析式中前导零被判定为不合法的，我们构造数据时可以生成相等的两组分别含与不含前导零的数据来用作测试和得到正确答案</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ul><li>打<code>jar</code>包</li></ul><p>step1：</p><p>准备<code>MANIFEST.MF</code>，并在其中写入如下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Manifest-Version: 1.0</span><br><span class="line">Main-Class: MainClass</span><br></pre></td></tr></table></figure><p>其中<code>Main-Class</code>后面是主类，后面需要加个回车，否则容易出奇怪的bug</p><p>step2：</p><p>编译<code>.java</code>文件，<code>cd</code>到那一堆<code>.java</code>文件夹里面，执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jar cvfm MainClass.jar MANIFEST.MF *.class</span><br></pre></td></tr></table></figure><p>step3：</p><p>把所有<code>.class</code>和<code>.MF</code>放在一个文件夹里，终端执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jar cvfm MainClass.jar MANIFEST.MF *.class</span><br></pre></td></tr></table></figure><p>step4：</p><p>验证打包是否成功，可以终端执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar MainClass.jar</span><br></pre></td></tr></table></figure><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>有时IDEA打开别人的项目时，突然飘红，出现红色的波浪下划线，错误提示：<code>cannot access com.xx......xx.class</code>，无法访问同一个包下的类，根本原因是IDEA缓存出现问题，可以强制删除缓存。</p><p><code>File -&gt; Invalidate Caches /Restart</code> </p><hr><p>评测姬：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> xeger <span class="keyword">import</span> Xeger</span><br><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line">DATE_FOR_SDTIN = <span class="number">0</span></span><br><span class="line">DATE_FOR_EVALUATION = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">MANUAL = <span class="number">0</span></span><br><span class="line">MACHINE = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataGenerator</span>():</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.FACTOR_MAX_PER_TERM = <span class="number">6</span></span><br><span class="line">        self.TERM_MAX_PER_POLY = <span class="number">10</span></span><br><span class="line">        self.constant_pool = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">2147483647</span>,</span><br><span class="line">                              <span class="number">5219260817</span>, <span class="number">5419260817</span>, <span class="number">9223372036854775807</span>,</span><br><span class="line">                              <span class="number">19260817192608172333</span>, <span class="number">19260817192608174666</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addsub</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> random.randint(<span class="number">0</span>, <span class="number">1</span>) &amp; <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;+&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;-&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">self</span>):</span></span><br><span class="line">        index = self.signedInt()</span><br><span class="line">        blank = self.blankFactor()</span><br><span class="line">        <span class="keyword">return</span> [<span class="string">&quot;**&quot;</span> + blank + <span class="built_in">str</span>(index[<span class="number">0</span>]), <span class="string">&quot;**&quot;</span> + blank + <span class="built_in">str</span>(index[<span class="number">1</span>])]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">blankFactor</span>(<span class="params">self</span>):</span></span><br><span class="line">        blank_factor = Xeger().xeger(<span class="string">&quot;[\t ]&#123;0,4&#125;&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> blank_factor</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">signedInt</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> random.randint(<span class="number">0</span>, <span class="number">2</span>) == <span class="number">0</span>:</span><br><span class="line">            char = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            char = self.addsub()</span><br><span class="line">        index = random.randint(<span class="number">0</span>, <span class="built_in">len</span>(self.constant_pool) - <span class="number">1</span>)</span><br><span class="line">        constant = self.constant_pool[index]</span><br><span class="line">        pre_zero = Xeger().xeger(<span class="string">&quot;0&#123;0,4&#125;&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> [char + <span class="built_in">str</span>(pre_zero) + <span class="built_in">str</span>(constant), char + <span class="built_in">str</span>(constant)]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">powerFunction</span>(<span class="params">self</span>):</span></span><br><span class="line">        blank = self.blankFactor()</span><br><span class="line">        <span class="keyword">if</span> random.randint(<span class="number">0</span>, <span class="number">1</span>) == <span class="number">0</span>:</span><br><span class="line">            index = self.index()</span><br><span class="line">            index_list = [blank + index[<span class="number">0</span>], blank + index[<span class="number">1</span>]]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            index_list = [<span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>]</span><br><span class="line">        <span class="keyword">return</span> [<span class="string">&quot;x&quot;</span> + blank + index_list[<span class="number">0</span>], <span class="string">&quot;x&quot;</span> + blank + index_list[<span class="number">1</span>]]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">triangleFactor</span>(<span class="params">self</span>):</span></span><br><span class="line">        blank = self.blankFactor()</span><br><span class="line">        index = self.index()</span><br><span class="line">        <span class="keyword">if</span> random.randint(<span class="number">0</span>, <span class="number">1</span>) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> random.randint(<span class="number">0</span>, <span class="number">1</span>) == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> [<span class="string">&quot;sin&quot;</span> + blank + <span class="string">&quot;(&quot;</span> + blank + <span class="string">&quot;x&quot;</span> + blank + <span class="string">&quot;)&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;sin&quot;</span> + blank + <span class="string">&quot;(&quot;</span> + blank + <span class="string">&quot;x&quot;</span> + blank + <span class="string">&quot;)&quot;</span>]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> [<span class="string">&quot;sin&quot;</span> + blank + <span class="string">&quot;(&quot;</span> + blank + <span class="string">&quot;x&quot;</span> + blank + <span class="string">&quot;)&quot;</span> + blank + index[<span class="number">0</span>],</span><br><span class="line">                        <span class="string">&quot;sin&quot;</span> + blank + <span class="string">&quot;(&quot;</span> + blank + <span class="string">&quot;x&quot;</span> + blank + <span class="string">&quot;)&quot;</span> + blank + index[<span class="number">1</span>]]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> random.randint(<span class="number">0</span>, <span class="number">1</span>) == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> [<span class="string">&quot;cos&quot;</span> + blank + <span class="string">&quot;(&quot;</span> + blank + <span class="string">&quot;x&quot;</span> + blank + <span class="string">&quot;)&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;cos&quot;</span> + blank + <span class="string">&quot;(&quot;</span> + blank + <span class="string">&quot;x&quot;</span> + blank + <span class="string">&quot;)&quot;</span>]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> [<span class="string">&quot;cos&quot;</span> + blank + <span class="string">&quot;(&quot;</span> + blank + <span class="string">&quot;x&quot;</span> + blank + <span class="string">&quot;)&quot;</span> + blank + index[<span class="number">0</span>],</span><br><span class="line">                        <span class="string">&quot;cos&quot;</span> + blank + <span class="string">&quot;(&quot;</span> + blank + <span class="string">&quot;x&quot;</span> + blank + <span class="string">&quot;)&quot;</span> + blank + index[<span class="number">1</span>]]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">expFactor</span>(<span class="params">self</span>):</span></span><br><span class="line">        exp = self.getPolynome()</span><br><span class="line">        <span class="keyword">return</span> [<span class="string">&quot;(&quot;</span> + exp[<span class="number">0</span>] + <span class="string">&quot;)&quot;</span>, <span class="string">&quot;(&quot;</span> + exp[<span class="number">1</span>] + <span class="string">&quot;)&quot;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getFactor</span>(<span class="params">self</span>):</span></span><br><span class="line">        select = random.randint(<span class="number">0</span>, <span class="number">3</span>)</span><br><span class="line">        <span class="keyword">if</span> select == <span class="number">0</span>:</span><br><span class="line">            factor = self.powerFunction()</span><br><span class="line">        <span class="keyword">elif</span> select == <span class="number">1</span>:</span><br><span class="line">            factor = self.signedInt()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            factor = self.triangleFactor()</span><br><span class="line">        <span class="keyword">return</span> factor</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getTerm</span>(<span class="params">self, term_depth=<span class="number">1</span></span>):</span></span><br><span class="line">        <span class="keyword">if</span> term_depth &gt; self.FACTOR_MAX_PER_TERM:</span><br><span class="line">            pre_char = Xeger().xeger(<span class="string">&quot;[&quot;</span> + self.addsub() + self.blankFactor() + <span class="string">&quot;]?&quot;</span>)</span><br><span class="line">            factor = self.getFactor()</span><br><span class="line">            <span class="keyword">return</span> [pre_char + factor[<span class="number">0</span>], pre_char + factor[<span class="number">1</span>]]</span><br><span class="line">        term = self.getTerm(term_depth=term_depth + <span class="number">1</span>)</span><br><span class="line">        multiply_char = self.blankFactor() + <span class="string">&quot;*&quot;</span> + self.blankFactor()</span><br><span class="line">        factor = self.getFactor()</span><br><span class="line">        <span class="keyword">return</span> [term[<span class="number">0</span>] + multiply_char + factor[<span class="number">0</span>], term[<span class="number">1</span>] + multiply_char + factor[<span class="number">1</span>]]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getPolynome</span>(<span class="params">self, poly_depth=<span class="number">1</span></span>):</span></span><br><span class="line">        <span class="keyword">if</span> poly_depth &gt; self.TERM_MAX_PER_POLY:</span><br><span class="line">            pre_char = self.blankFactor() + Xeger().xeger(<span class="string">&quot;[&quot;</span> + self.addsub() + self.blankFactor() + <span class="string">&quot;]?&quot;</span>)</span><br><span class="line">            term = self.getTerm()</span><br><span class="line">            blank = self.blankFactor()</span><br><span class="line">            <span class="keyword">return</span> [pre_char + term[<span class="number">0</span>] + blank, pre_char + term[<span class="number">1</span>] + blank]</span><br><span class="line">        poly = self.getPolynome(poly_depth + <span class="number">1</span>)</span><br><span class="line">        pre_char = self.addsub() + self.blankFactor()</span><br><span class="line">        blank = self.blankFactor()</span><br><span class="line">        term = self.getTerm()</span><br><span class="line">        <span class="keyword">return</span> [poly[<span class="number">0</span>] + pre_char + term[<span class="number">0</span>] + blank, poly[<span class="number">1</span>] + pre_char + term[<span class="number">1</span>] + blank]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(self.getPolynome()[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getPolyDiff</span>(<span class="params">poly</span>):</span></span><br><span class="line">    x = sympy.Symbol(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">    f = sympy.sympify(poly)</span><br><span class="line">    <span class="keyword">return</span> sympy.diff(f, x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cmd</span>(<span class="params">command, data</span>):</span></span><br><span class="line">    subp = subprocess.Popen(command, shell=<span class="literal">True</span>, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE,</span><br><span class="line">                            encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    subp.communicate(data)</span><br><span class="line">    <span class="keyword">if</span> subp.poll() == <span class="number">0</span>:</span><br><span class="line">        res = subp.communicate()[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        res = <span class="string">&quot;失败&quot;</span></span><br><span class="line">    subp.kill()</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">judgeSingleDate</span>(<span class="params">judge_object, mode, manual_data=<span class="string">&quot;&quot;</span></span>):</span></span><br><span class="line">    <span class="keyword">if</span> mode == MACHINE:</span><br><span class="line">        poly_list = DataGenerator().getPolynome()</span><br><span class="line">        poly_for_evaluation = poly_list[DATE_FOR_EVALUATION]</span><br><span class="line">        poly_for_test = poly_list[DATE_FOR_SDTIN]</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;data: &quot;</span>, poly_for_evaluation)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;data_for_test: &quot;</span>, poly_for_test)</span><br><span class="line">        diff_ans = getPolyDiff(poly_for_evaluation)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;correct answer: &quot;</span>, diff_ans)</span><br><span class="line">        jar_ans = cmd(<span class="string">&quot;java -jar &quot;</span> + judge_object, poly_for_test)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;your answer: &quot;</span>, jar_ans)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;your identity: &quot;</span>, judge_object)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s is right: &quot;</span> % judge_object, diff_ans.equals(jar_ans))</span><br><span class="line">        <span class="keyword">return</span> diff_ans.equals(jar_ans)</span><br><span class="line">    <span class="keyword">if</span> mode == MANUAL:</span><br><span class="line">        expData = manual_data</span><br><span class="line">        diff_ans = getPolyDiff(expData)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;correct answer: &quot;</span>, diff_ans)</span><br><span class="line">        jar_ans = cmd(<span class="string">&quot;java -jar &quot;</span> + judge_object, expData)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;your answer: &quot;</span>, jar_ans)</span><br><span class="line">        <span class="keyword">if</span> jar_ans.strip() != <span class="string">&quot;WRONG FORMAT!&quot;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;%s is right: &quot;</span> % judge_object, diff_ans.equals(jar_ans))</span><br><span class="line">            <span class="keyword">return</span> diff_ans.equals(jar_ans)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">judge</span>(<span class="params">judge_list, mode, count=<span class="number">200</span></span>):</span></span><br><span class="line">    index = <span class="number">0</span></span><br><span class="line">    found = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">while</span> index &lt; count:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;----------------------------------&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;data &quot;</span>, index, <span class="string">&quot; :&quot;</span>)</span><br><span class="line">        error_name_list = []</span><br><span class="line">        <span class="keyword">if</span> mode == MANUAL:</span><br><span class="line">            expData = <span class="built_in">input</span>(<span class="string">&quot;your data: &quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> judge_object <span class="keyword">in</span> judge_list:</span><br><span class="line">            right = judgeSingleDate(judge_object, mode=mode, manual_data=expData)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> right:</span><br><span class="line">                found = <span class="literal">True</span></span><br><span class="line">                error_name_list.append(judge_object)</span><br><span class="line">        <span class="keyword">if</span> found:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;ERROR!!!!!!!!!!!!!&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Error person: &quot;</span>, error_name_list)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        index = index + <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Congratulations! you all killed!&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    judgelist = [<span class="string">&quot;Alterego.jar&quot;</span>, <span class="string">&quot;Archer.jar&quot;</span>, <span class="string">&quot;Assassin.jar&quot;</span>, <span class="string">&quot;Berserker.jar&quot;</span>, <span class="string">&quot;Caster.jar&quot;</span>, <span class="string">&quot;Rider.jar&quot;</span>,</span><br><span class="line">                 <span class="string">&quot;oo_hw_3.jar&quot;</span>, <span class="string">&quot;saber.jar&quot;</span>]</span><br><span class="line">    judge(judgelist, MANUAL)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前置知识&quot;&gt;&lt;a href=&quot;#前置知识&quot; class=&quot;headerlink&quot; title=&quot;前置知识&quot;&gt;&lt;/a&gt;前置知识&lt;/h2&gt;&lt;h3 id=&quot;sympy库&quot;&gt;&lt;a href=&quot;#sympy库&quot; class=&quot;headerlink&quot; title=&quot;sympy</summary>
      
    
    
    
    <category term="ObjectOriented" scheme="http://yoursite.com/categories/ObjectOriented/"/>
    
    
    <category term="OO" scheme="http://yoursite.com/tags/OO/"/>
    
    <category term="评测机" scheme="http://yoursite.com/tags/%E8%AF%84%E6%B5%8B%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>蓝桥-往届省赛</title>
    <link href="http://yoursite.com/2021/03/01/%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98/%E8%93%9D%E6%A1%A5-%E7%AC%AC9%E5%B1%8A%E7%9C%81%E8%B5%9B/"/>
    <id>http://yoursite.com/2021/03/01/%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98/%E8%93%9D%E6%A1%A5-%E7%AC%AC9%E5%B1%8A%E7%9C%81%E8%B5%9B/</id>
    <published>2021-03-01T04:22:16.000Z</published>
    <updated>2021-04-27T03:46:44.304Z</updated>
    
    <content type="html"><![CDATA[<h2 id="三体攻击"><a href="#三体攻击" class="headerlink" title="三体攻击"></a>三体攻击</h2><p>三体人将对地球发起攻击。为了抵御攻击，地球人派出了 A × B × C 艘战舰，在太空中排成一个 A 层 B 行 C 列的立方体。其中，第 i 层第 j 行第 k 列的战舰（记为战舰 (i, j, k)）的生命值为 d(i, j, k)。</p><p>三体人将会对地球发起 m 轮“立方体攻击”，每次攻击会对一个小立方体中的所有战舰都造成相同的伤害。具体地，第 t 轮攻击用 7 个参数 lat, rat, lbt, rbt, lct, rct, ht 描述：所有满足 i ∈ [lat, rat],j ∈ [lbt, rbt],k ∈ [lct, rct] 的战舰 (i, j, k) 会受到 ht 的伤害。如果一个战舰累计受到的总伤害超过其防御力，那么这个战舰会爆炸。地球指挥官希望你能告诉他，第一艘爆炸的战舰是在哪一轮攻击后爆炸的。</p><p>输入格式： 从标准输入读入数据。第一行包括 4 个正整数 A, B, C, m；</p><p>第二行包含 A × B × C 个整数，其中第 (i − 1) × B × C + (j − 1) × C + k个数为 d(i, j, k)；</p><p>第 3 到第 m + 2 行中，第 (t + 2) 行包含 7 个正整数 lat, rat, lbt, rbt, lct, rct, ht。</p><p>输出格式： 输出到标准输出。输出第一个爆炸的战舰是在哪一轮攻击后爆炸的。保证一定存在这样的战舰。</p><p>样例输入：</p><blockquote><p>2 2 2 3<br>1 1 1 1 1 1 1 1<br>1 2 1 2 1 1 1<br>1 1 1 2 1 2 1<br>1 1 1 1 1 1 2</p></blockquote><p>样例输出： 2</p><p>样例解释： 在第 2 轮攻击后，战舰 (1,1,1) 总共受到了 2 点伤害，超出其防御力导致爆炸。</p><p>数据约定： 对于 10% 的数据，B = C = 1； 对于 20% 的数据，C = 1； 对于 40% 的数据，A × B × C, m ≤ 10, 000； 对于 70% 的数据，A, B, C ≤ 200； 对于所有数据，A × B × C ≤ 10^6, m ≤ 10^6, 0 ≤ d(i, j, k), ht ≤ 10^9。</p><h2 id="正则问题"><a href="#正则问题" class="headerlink" title="正则问题"></a>正则问题</h2><p>考虑一种简单的正则表达式：只由 x、( )、| 组成。求出这个正则表达式能接受的最长字符串的长度。</p><p>例如， ((xx|xxx)x|(x|xx))xx 能接受的最长字符串是： xxxxxx，长度是6。</p><p>输入：</p><blockquote><p>一个由x、()、 |组成的正则表达式。输入长度不超过100，保证合法。</p></blockquote><p>输出：</p><blockquote><p>这个正则表达式能接受的最长字符串的长度。</p></blockquote><p>输入：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">((xx|xxx)x|(x|xx))xx</span><br></pre></td></tr></table></figure><p>程序应该输出：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure><hr><p>把正则表达式分为两部分：</p><ul><li>一部分是原表达式中由括号组成的一个更小的子表达式。</li><li>另一部分则为原表达式中非括号部分。</li></ul><p>例如样例中的<code>((xx|xxx)x|(x|xx))xx</code>这个表达式分为：</p><ul><li><code>((xx|xxx)x|(x|xx))</code>即原式括号内的子表达式。当然，这个子表达式中还有更小的子表达式。</li><li><code>XX</code>即原式中的非括号部分。</li></ul><p>我们循环遍历每个字符，计数所能接受的最长字符串的长度，同时，每遇到一个子表达式，我们递归地去求解这个表达式接受的最大长度。也就是说，每层递归中，我们遍历当前子表达式，每个字符有4种可能：</p><ul><li>(，说明即将遇到一个子表达式，递归求解该子表达式的长度，累加到当前结果cur。</li><li>)，递归边界，说明一个子表达式结束，返回结果<code>Math.max(cur, pre)</code>，其中，pre用于记录当前表达式中|符号前面的最大长度。</li><li>|，说明该符号前后两侧均有一个长度，我们要取两者中较大者，因此需要用变量pre记录之前的结果。</li><li>X，增加当前X字符的数量。</li></ul><p>最后，指针p遍历完表达式返回结果<code>Math.max(cur, pre)</code>。</p><hr><h1 id="第七届"><a href="#第七届" class="headerlink" title="第七届"></a>第七届</h1><h2 id="8-取球博弈"><a href="#8-取球博弈" class="headerlink" title="8 取球博弈"></a>8 取球博弈</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>两个人玩取球的游戏。一共有N个球，每人轮流取球，每次可取集合{n1,n2,n3}中的任何一个数目。如果无法继续取球，则游戏结束。此时，持有奇数个球的一方获胜。如果两人都是奇数，则为平局。假设双方都采用最聪明的取法，第一个取球的人一定能赢吗？试编程解决这个问题。</p><p>输入格式：</p><blockquote><p>第一行3个正整数n1 n2 n3，空格分开，表示每次可取的数目 (0&lt;n1,n2,n3&lt;100)<br>第二行5个正整数x1 x2 … x5，空格分开，表示5局的初始球数(0&lt;xi&lt;1000)</p></blockquote><p>输出格式：</p><blockquote><p>一行5个字符，空格分开。分别表示每局先取球的人能否获胜。能获胜则输出+，次之，如有办法逼平对手，输出0，无论如何都会输，则输出-</p></blockquote><p>例如，输入：</p><blockquote><p>1 2 3<br>1 2 3 4 5</p></blockquote><p>程序应该输出：</p><blockquote><p>+ 0 + 0 -</p></blockquote><p>再例如，输入：</p><blockquote><p>1 4 5<br>10 11 12 13 15</p></blockquote><p>程序应该输出：</p><blockquote><p>0 - 0 + +</p></blockquote><p>再例如，输入：</p><blockquote><p>2 3 5<br>7 8 9 10 11</p></blockquote><p>程序应该输出：</p><blockquote><p>+ 0 0 0 0</p></blockquote><p>再例如，输入：</p><blockquote><p>1 7 8<br>900 901 903 905 907</p></blockquote><p>程序应该输出：</p><blockquote><p>0 + - - +</p></blockquote><p>资源约定：</p><blockquote><p>峰值内存消耗（含虚拟机） &lt; 256M<br>CPU消耗 &lt; 3000ms</p></blockquote><p>请严格按要求输出，不要画蛇添足地打印类似：“请您输入…” 的多余内容。所有代码放在同一个源文件中，调试通过后，拷贝提交该源码。注意：不要使用package语句。不要使用jdk1.7及以上版本的特性。注意：主类的名字必须是：Main，否则按无效代码处理。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>形如这样的博弈题，我们都可以递归去枚举所有局面然后得出胜负。但本题需要注意的是球数比较多，而可取的球数又可能比较少，这样递归的深度会很大，导致无法通过所有测试样例，因此我们需要使用记忆化递归。</p><p>此外，还需要注意到，博弈局面与两方所持球数无关，而与所持球数的奇偶有关，因此我们可以只记录奇偶（1和0）而不记录具体球数。</p><p>递归过程中，我们首先去判断是否曾经记录过当前局面，若记录过则直接返回记录的结果，否则枚举所有可取球数的情况（共3种），这里要注意，当前人取球后，便成为下个取球人，而另一个人则在下次递归中成为当前取球人，因此要注意方法中参数的变化。当无法继续取球时，直接根据奇偶判定结果。返回当前局面的胜负之前，要先记录。</p><p>其他实现细节请参考代码中的详细注释。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] take = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];<span class="comment">// 记录可取的球数</span></span><br><span class="line">    <span class="comment">// 三维字符数组map用于记忆化递归</span></span><br><span class="line">    <span class="comment">// 剩余cnt个球时，当前取球人有cur个球，下个取球人有next个球</span></span><br><span class="line">    <span class="comment">// map[cnt][cur][next]记录上局面下当前取球人取球得到的结果</span></span><br><span class="line">    <span class="comment">// 又由于博弈结果只与奇偶有关，因此cur与next不记录具体球数，而用0表示偶数，1表示奇数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Character[][][] map = <span class="keyword">new</span> Character[<span class="number">1000</span>][<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">            take[i] = sc.nextInt();</span><br><span class="line">        Arrays.sort(take);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">            System.out.print(play(sc.nextInt(), <span class="number">0</span>, <span class="number">0</span>) + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 记忆化递归得到博弈结果，由于结果只与奇偶有关，因此参数不记录具体球数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cnt  剩余球数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cur  当前取球人球数的奇偶</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> next 下个取球人球数的奇偶</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">char</span> <span class="title">play</span><span class="params">(<span class="keyword">int</span> cnt, <span class="keyword">int</span> cur, <span class="keyword">int</span> next)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (map[cnt][cur][next] != <span class="keyword">null</span>) <span class="comment">// 当前局面曾经记录过则直接返回</span></span><br><span class="line">            <span class="keyword">return</span> map[cnt][cur][next];</span><br><span class="line">        <span class="keyword">if</span> (cnt &lt; take[<span class="number">0</span>]) &#123;<span class="comment">// 无法继续取球则直接判定结果</span></span><br><span class="line">            <span class="keyword">if</span> ((cur &amp; <span class="number">1</span>) == <span class="number">1</span> &amp;&amp; (next &amp; <span class="number">1</span>) == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;+&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span> ((cur &amp; <span class="number">1</span>) == <span class="number">0</span> &amp;&amp; (next &amp; <span class="number">1</span>) == <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">boolean</span> tie = <span class="keyword">false</span>;<span class="comment">// 记录是否能平局</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (take[i] &gt; cnt)<span class="comment">// 不够取</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">// 注意play方法后两个参数的变化</span></span><br><span class="line">            <span class="comment">// 当前取球人取完后，便成为下个取球人，另一个人则成为新的当前取球人</span></span><br><span class="line">            <span class="comment">// 当前取球人取完，下个取球人成为当前取球人去取球</span></span><br><span class="line">            <span class="keyword">char</span> res = play(cnt - take[i], next, cur + take[i] &amp; <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (res == <span class="string">&#x27;-&#x27;</span>) &#123;<span class="comment">// 新的取球人输了，说明旧的取球人能赢</span></span><br><span class="line">                map[cnt][cur][next] = <span class="string">&#x27;+&#x27;</span>;<span class="comment">// 记录结果</span></span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;+&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (res == <span class="string">&#x27;0&#x27;</span>) &#123;<span class="comment">// 出现过平局</span></span><br><span class="line">                tie = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (tie) &#123;<span class="comment">// 不能赢，能平则平</span></span><br><span class="line">            map[cnt][cur][next] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        map[cnt][cur][next] = <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-压缩变换"><a href="#10-压缩变换" class="headerlink" title="10 压缩变换"></a>10 压缩变换</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>小明最近在研究压缩算法。他知道，压缩的时候如果能够使得数值很小，就能通过熵编码得到较高的压缩比。然而，要使数值很小是一个挑战。最近，小明需要压缩一些正整数的序列，这些序列的特点是，后面出现的数字很大可能是刚出现过不久的数字。对于这种特殊的序列，小明准备对序列做一个变换来减小数字的值。变换的过程如下： 从左到右枚举序列，每枚举到一个数字，如果这个数字没有出现过，则将数字变换成它的相反数，如果数字出现过，则看它在原序列中最后的一次出现后面（且在当前数前面）出现了几种数字，用这个种类数替换原来的数字。比如，序列(a1, a2, a3, a4, a5)=(1, 2, 2, 1, 2)在变换过程为： a1: 1未出现过，所以a1变为-1； a2: 2未出现过，所以a2变为-2； a3: 2出现过，最后一次为原序列的a2，在a2后、a3前有0种数字，所以a3变为0； a4: 1出现过，最后一次为原序列的a1，在a1后、a4前有1种数字，所以a4变为1； a5: 2出现过，最后一次为原序列的a3，在a3后、a5前有1种数字，所以a5变为1。 现在，给出原序列，请问，按这种变换规则变换后的序列是什么。</p><p>输入格式：</p><blockquote><p>输入第一行包含一个整数n，表示序列的长度。<br>第二行包含n个正整数，表示输入序列。</p></blockquote><p>输出格式：</p><blockquote><p>输出一行，包含n个数，表示变换后的序列。</p></blockquote><p>例如，输入：</p><blockquote><p>5<br>1 2 2 1 2</p></blockquote><p>程序应该输出：</p><blockquote><p>-1 -2 0 1 1</p></blockquote><p>再例如，输入：</p><blockquote><p>12<br>1 1 2 3 2 3 1 2 2 2 3 1</p></blockquote><p>程序应该输出：</p><blockquote><p>-1 0 -2 -3 1 1 2 2 0 0 2 2</p></blockquote><p>数据规模与约定：</p><blockquote><p>对于30%的数据，n&lt;=1000； 对于50%的数据，n&lt;=30000； 对于100%的数据，1 &lt;=n&lt;=100000，1&lt;=ai&lt;=10^9</p></blockquote><p>资源约定：</p><blockquote><p>峰值内存消耗（含虚拟机） &lt; 256M<br>CPU消耗 &lt; 3000ms</p></blockquote><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>题意不难，我们在得到一个重复出现的数字后，需要查询该位置和它上一次出现的位置之间含有的不重复数的个数，暴力求解是会超时的。我们不妨尝试线段树这种适合多次区间查询的数据结构，同时搭配使用哈希表，记录每个数最后一次出现的位置。</p><p>接下来的问题在于线段树的结点要维护什么？我们建立一个表示下标0到n-1区间的线段树，每个结点维护一个值，用于表示该区间内有几个不重复数。这样一来，我们遇到一个重复出现的数后，就在线段树中查询对应区间，得到不重复数的个数，作为压缩结果；遇到一个未出现过的数，就用相反数作为压缩结果。我们用哈希表来判断一个数是否出现过，以上就是解题的主要思路。</p><p>由于线段树结点中记录的是区间内不重复数的个数，所以我们要在线段树内去重。具体来说，若得到一个未出现过的数，用相反数作为压缩结果后，将其存入哈希表，同时存入线段树，即令树中所有包含它的区间的结点值加一，表示该区间内多了这个不重复数；若得到一个出现过的数，我们查询哈希表得到上一次出现的位置，由此得到一个查询区间，我们要在线段树中查询这个区间内有多少个不重复的数，要注意，我们此后必须更新哈希表，更新线段树（两次）。具体做法：由于线段树维护的是区间中不重复数的个数，而当前数又是重复出现过的，所以我们需要在该数上一次出现的所有区间内删除它，表示这些区间少了这个数，这个数将出现在新的区间中，表示新区间多了这个不重复数（因为之前的区间已做了删除，所以它目前就是不重复数），这一减一增是对线段树的两次更新。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 线段树</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SegmentTree</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> L, R;<span class="comment">// 所维护的区间的左右端点</span></span><br><span class="line">        <span class="keyword">int</span> cnt;<span class="comment">// 结点值，即某数最后一次出现的位置是否在此，是则为1，否则为0</span></span><br><span class="line">        SegmentTree left, right;<span class="comment">// 左右子树</span></span><br><span class="line"></span><br><span class="line">        SegmentTree(<span class="keyword">int</span> l, <span class="keyword">int</span> r) &#123;</span><br><span class="line">            L = l;</span><br><span class="line">            R = r;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> n = sc.nextInt();</span><br><span class="line">        <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            a[i] = sc.nextInt();</span><br><span class="line">        <span class="keyword">int</span>[] ans = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();<span class="comment">// 哈希表记录各数最后一次出现的下标</span></span><br><span class="line">        SegmentTree root = buildST(<span class="number">0</span>, n - <span class="number">1</span>);<span class="comment">// 线段树维护0至n-1这个下标区间，记录有几个不重复数在此区间内最后一次出现</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!map.containsKey(a[i])) &#123;<span class="comment">// 第一次出现</span></span><br><span class="line">                ans[i] = -a[i];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 得到最后一次出现的位置</span></span><br><span class="line">                <span class="keyword">int</span> lastidx = map.get(a[i]);</span><br><span class="line">                <span class="comment">// 查询这个区间内有几个不重复数最后一次出现</span></span><br><span class="line">                <span class="comment">// 之所以统计的是最后一次出现的数的个数是为了不重复</span></span><br><span class="line">                <span class="comment">// 所以接下来要将该数上次出现的位置置0，因为现在有新的最后一次出现的位置</span></span><br><span class="line">                <span class="comment">// 若不置0，同样的数会被重复计算，得到的就不是该区间内不重复数的个数</span></span><br><span class="line">                ans[i] = query(root, lastidx + <span class="number">1</span>, i - <span class="number">1</span>);</span><br><span class="line">                update(root, lastidx, -<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            map.put(a[i], i);<span class="comment">// 更新最后一次出现的位置</span></span><br><span class="line">            update(root, i, <span class="number">1</span>);<span class="comment">// 在新的位置处置1，表示在该区间内最后一次出现，上次出现的位置已置0，防止重复统计</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : ans)</span><br><span class="line">            System.out.print(i + <span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 建树</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> L 线段树左端点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> R 线段树右端点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回树</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> SegmentTree <span class="title">buildST</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (L == R)<span class="comment">// 到达叶子结点</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SegmentTree(L, R);</span><br><span class="line">        SegmentTree root = <span class="keyword">new</span> SegmentTree(L, R);</span><br><span class="line">        <span class="keyword">int</span> mid = L + R &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 递归构建左右子树</span></span><br><span class="line">        root.left = buildST(L, mid);</span><br><span class="line">        root.right = buildST(mid + <span class="number">1</span>, R);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对结点进行更新，自底向上更新区间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> root 需要更新的子树</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> idx  要更新的叶子结点下标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> val  增量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(SegmentTree root, <span class="keyword">int</span> idx, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root.L == root.R) &#123;<span class="comment">// 到达叶子结点</span></span><br><span class="line">            root.cnt += val;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = root.L + root.R &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (idx &lt;= mid)<span class="comment">// 需要更新左子树</span></span><br><span class="line">            update(root.left, idx, val);</span><br><span class="line">        <span class="keyword">else</span><span class="comment">// 需要更新右子树</span></span><br><span class="line">            update(root.right, idx, val);</span><br><span class="line">        root.cnt = root.left.cnt + root.right.cnt;<span class="comment">// 更新根结点</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 区间查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> root  查询的子树</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> begin 查询区间的起点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end   查询区间的终点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(SegmentTree root, <span class="keyword">int</span> begin, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (begin &gt; end) <span class="comment">// 可能存在不合法区间，则该区间查询结果为0，表示这没有不重复的数</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (root.L == begin &amp;&amp; root.R == end)<span class="comment">// 结点与查询区间吻合，直接返回结点值</span></span><br><span class="line">            <span class="keyword">return</span> root.cnt;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> mid = root.L + root.R &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (begin &lt;= mid) &#123;</span><br><span class="line">            <span class="keyword">if</span> (end &lt;= mid)<span class="comment">// 整个区间在左子树</span></span><br><span class="line">                res = query(root.left, begin, end);</span><br><span class="line">            <span class="keyword">else</span><span class="comment">// 区间横跨左右子树</span></span><br><span class="line">                res = query(root.left, begin, mid) + query(root.right, mid + <span class="number">1</span>, end);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;<span class="comment">// 整个区间在右子树</span></span><br><span class="line">            res = query(root.right, begin, end);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;三体攻击&quot;&gt;&lt;a href=&quot;#三体攻击&quot; class=&quot;headerlink&quot; title=&quot;三体攻击&quot;&gt;&lt;/a&gt;三体攻击&lt;/h2&gt;&lt;p&gt;三体人将对地球发起攻击。为了抵御攻击，地球人派出了 A × B × C 艘战舰，在太空中排成一个 A 层 B 行 C 列的立</summary>
      
    
    
    
    <category term="Algorithm problems" scheme="http://yoursite.com/categories/Algorithm-problems/"/>
    
    
    <category term="algorithmic questions" scheme="http://yoursite.com/tags/algorithmic-questions/"/>
    
    <category term="蓝桥杯" scheme="http://yoursite.com/tags/%E8%93%9D%E6%A1%A5%E6%9D%AF/"/>
    
    <category term="差分" scheme="http://yoursite.com/tags/%E5%B7%AE%E5%88%86/"/>
    
    <category term="前缀和" scheme="http://yoursite.com/tags/%E5%89%8D%E7%BC%80%E5%92%8C/"/>
    
  </entry>
  
  <entry>
    <title>「Java」容器</title>
    <link href="http://yoursite.com/2021/03/01/Java/5-java%E5%AE%B9%E5%99%A8/"/>
    <id>http://yoursite.com/2021/03/01/Java/5-java%E5%AE%B9%E5%99%A8/</id>
    <published>2021-03-01T02:44:17.000Z</published>
    <updated>2021-04-25T13:09:58.070Z</updated>
    
    <content type="html"><![CDATA[<p>常见的各个容器的继承关系：</p><p><img src="https://i.loli.net/2021/03/01/rl4tPN1WsqybxdK.jpg" alt="屏幕截图 2021-03-01 103049.jpg"></p><h1 id="Iterable-接口"><a href="#Iterable-接口" class="headerlink" title="Iterable 接口"></a>Iterable 接口</h1><p><code>Iterable</code>是一个超级接口，被Collection所继承。它只有一个方法：<code>Iterator&lt;T&gt; iterator()</code>，返回一个迭代器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">List&lt;String&gt; l = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">    l.add(<span class="string">&quot;aa&quot;</span>);</span><br><span class="line">    l.add(<span class="string">&quot;bb&quot;</span>);</span><br><span class="line">    Iterator iter = l.iterator();</span><br><span class="line">    <span class="keyword">while</span>(iter.hasNext())&#123;</span><br><span class="line">        System.out.println((String)iter.next());</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//for循环的版本</span></span><br><span class="line"><span class="comment">//for(Iterator&lt;String&gt; iter=l.iterator();iter.hasNext();)&#123;</span></span><br><span class="line"><span class="comment">//String str = (String)iter.next();</span></span><br><span class="line"><span class="comment">//System.out.println(str);</span></span><br><span class="line"><span class="comment">//&#125;  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Collection-接口"><a href="#Collection-接口" class="headerlink" title="Collection 接口"></a>Collection 接口</h1><p>JDK 不提供此接口的任何直接实现：它提供更具体的子接口（如 Set 和 List）实现。不同的Collection子类对于有序性、重复性、null、线程同步都有不同的策略。</p><h2 id="List-接口"><a href="#List-接口" class="headerlink" title="List 接口"></a>List 接口</h2><p>List是有序的 collection（也称为序列）。用户可以根据元素的整数索引（在列表中的位置）访问元素，并搜索列表中的元素。与Set不同，List允许插入重复的值。</p><p>List 接口提供了特殊的迭代器，称为 <code>ListIterator</code>，该迭代器还允许元素插入和替换以及双向访问。</p><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><p>List接口的排序可以通过<code>Collections.sort()</code>来进行<strong>定制排序</strong>。只需要<strong>继承Comparable接口</strong>后，重写<code>compareTo()</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Thread</span> <span class="keyword">implements</span> <span class="title">Comparable</span> </span>&#123;   </span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        List&lt;Student&gt; list = <span class="keyword">new</span> ArrayList&lt;Student&gt;();</span><br><span class="line">        list.add(stu3);</span><br><span class="line">            ...</span><br><span class="line">        Collections.sort(list);</span><br><span class="line">&#125;        </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//使用当前对象的年龄和其他对象的年龄比较，如果&lt;0返回负数，&gt;0返回正数，=0返回0</span></span><br><span class="line">        <span class="keyword">int</span> z = <span class="keyword">this</span>.age - ((Student)o).getAge();</span><br><span class="line">        <span class="keyword">if</span>(z&lt;<span class="number">0</span>) </span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;  </span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(z == <span class="number">0</span>) </span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><h3 id="List的子类"><a href="#List的子类" class="headerlink" title="List的子类"></a>List的子类</h3><h4 id="1-ArrayList"><a href="#1-ArrayList" class="headerlink" title="1. ArrayList"></a>1. ArrayList</h4><ul><li>基于数组实现的List类，它封装了一个<strong>动态的、增长的、允许再分配的</strong><code>Object[ ]</code>数组，允许对元素进行快速随机访问</li><li>当从ArrayList的中间位置插入或者删除元素时，需要对数组进行复制、移动、代价比较高。因此它<strong>适合随机查找和遍历</strong>，不适合插入和删除。</li></ul><h4 id="2-LinkedList"><a href="#2-LinkedList" class="headerlink" title="2. LinkedList"></a>2. LinkedList</h4><ul><li>LinkedList是用<strong>链表结构</strong>存储数据的，很适合数据的<strong>动态插入和删除</strong>，随机访问和遍历速度比较慢。</li><li>实现了Deque接口，专门用于操作表头和表尾元素，可以当作堆栈、队列和<strong>双向队列</strong>使用。</li></ul><h4 id="3-Vector"><a href="#3-Vector" class="headerlink" title="3. Vector"></a>3. Vector</h4><ul><li>与ArrayList一样，也是通过数组实现的，不同的是它支持线程的同步，避免多线程同时写而引起的不一致性，但要慢很多，现在块被淘汰了。</li></ul><h2 id="Set-接口"><a href="#Set-接口" class="headerlink" title="Set 接口"></a>Set 接口</h2><p>集合，是无序、不可重复的。</p><p>Set判断两个对象相同不用<code>&quot;==&quot;</code>而是根据<code>equals</code>方法。在使用Set集合的时候，应该注意：</p><ul><li>为Set集合里的元素的实现类实现一个有效的<code>equals(Object)</code>方法；</li><li>对Set的构造函数，传入的Collection参数不能包含重复的元素。</li></ul><h3 id="Set-的子类"><a href="#Set-的子类" class="headerlink" title="Set 的子类"></a>Set 的子类</h3><h4 id="1-HashSet"><a href="#1-HashSet" class="headerlink" title="1. HashSet"></a>1. HashSet</h4><ul><li>使用HASH算法来存储集合中的元素，集合判断两个元素相等的标准是两个对象通过<code>equals()</code>方法比较相等，并且两个对象的<code>hashCode()</code>方法的返回值相等</li></ul><h5 id="1-1-LinkedHashSet"><a href="#1-1-LinkedHashSet" class="headerlink" title="1.1 LinkedHashSet"></a>1.1 LinkedHashSet</h5><ul><li>也是根据元素的hashCode值来决定元素的存储位置，但同时使用链表维护元素的次序，当遍历集合里的元素时，LinkedHashSet将会按元素的添加顺序来访问集合里的元素</li></ul><h4 id="2-SortedSet"><a href="#2-SortedSet" class="headerlink" title="2. SortedSet"></a>2. SortedSet</h4><p>此接口主要用于<strong>排序</strong>操作，实现了此接口的子类都属于排序的子类</p><h5 id="2-1TreeSet"><a href="#2-1TreeSet" class="headerlink" title="2.1TreeSet"></a>2.1TreeSet</h5><ul><li>TreeSet是SortedSet接口的实现类，TreeSet可以确保集合元素处于排序状态</li></ul><h4 id="3-EnumSet"><a href="#3-EnumSet" class="headerlink" title="3. EnumSet"></a>3. EnumSet</h4><ul><li>EnumSet是一个专门为<strong>枚举类</strong>设计的集合类，EnumSet中所有元素都必须是<strong>指定枚举类型</strong>的枚举值，该枚举类型在创建EnumSet时显式、或隐式地指定。EnumSet的集合元素也是有序的，</li></ul><h2 id="Queue-接口"><a href="#Queue-接口" class="headerlink" title="Queue 接口"></a>Queue 接口</h2><p>用于模拟队列</p><h4 id="1-PriorityQueue"><a href="#1-PriorityQueue" class="headerlink" title="1. PriorityQueue"></a>1. PriorityQueue</h4><ul><li>按照队列中某个属性的大小来排列的，因此称作优先队列。</li></ul><h4 id="2-Deque"><a href="#2-Deque" class="headerlink" title="2. Deque"></a>2. Deque</h4><ul><li>双端队列</li></ul><h5 id="2-1-ArrayDeque"><a href="#2-1-ArrayDeque" class="headerlink" title="2.1  ArrayDeque"></a>2.1  ArrayDeque</h5><ul><li>基于数组的双端队列。</li></ul><h5 id="2-2-LinkedList"><a href="#2-2-LinkedList" class="headerlink" title="2.2 LinkedList"></a>2.2 LinkedList</h5><ul><li>如上</li></ul><h1 id="Map-接口"><a href="#Map-接口" class="headerlink" title="Map 接口"></a>Map 接口</h1><p>Map用于保存具有“映射关系”的数据。每个Entry都持有<code>键-值</code>两个对象。其中，Value可能重复，但Key不可重复</p><h2 id="1-HashMap"><a href="#1-HashMap" class="headerlink" title="1. HashMap"></a>1. HashMap</h2><p>HashMap也不能保证<code>key-value</code>对的顺序。类似于HashSet判断两个key是否相等的标准: 两个key通过<code>equals()</code>方法比较返回true、 同时两个key的<code>hashCode</code>值也必须相等</p><h3 id="1-1-LinkedHashMap"><a href="#1-1-LinkedHashMap" class="headerlink" title="1.1 LinkedHashMap"></a>1.1 LinkedHashMap</h3><ul><li>LinkedHashMap也使用<strong>双向链表</strong>来维护key-value对的次序，该链表负责维护Map的迭代顺序，与key-value对的插入顺序一致（注意和TreeMap对所有的key-value进行排序区分）</li></ul><h2 id="2-HashTable"><a href="#2-HashTable" class="headerlink" title="2. HashTable"></a>2. HashTable</h2><p>一个古老的Map实现类。</p><h3 id="2-1-Properties"><a href="#2-1-Properties" class="headerlink" title="2.1 Properties"></a>2.1 Properties</h3><ul><li>Properties对象在处理属性文件时特别方便（windows平台的.ini文件）。Properties类可以把Map对象和属性文件关联，从而把Map对象的<code>key - value</code>对写入到属性文件中，也可把属性文件中的“属性名-属性值”加载进Map对象中。</li></ul><h2 id="3-SortedMap"><a href="#3-SortedMap" class="headerlink" title="3. SortedMap"></a>3. SortedMap</h2><p>如同<code>Set-&gt;SortedSet-&gt;TreeSet</code>一样，Map也有<code>Map-&gt;SortedMap-&gt;TreeMap</code>的继承关系。</p><h3 id="3-1-TreeMap"><a href="#3-1-TreeMap" class="headerlink" title="3.1 TreeMap"></a>3.1 TreeMap</h3><ul><li>是一个红黑树结构，每个键值对都作为红黑树的一个节点。TreeMap存储键值对时，需要根据key对节点进行排序，TreeMap可以保证所有的<code>key-value</code>对处于有序状态。 </li><li>TreeMap也有两种排序方式：自然排序、定制排序（类似于上面List的重写<code>CompareTo()</code>方法）。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;常见的各个容器的继承关系：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2021/03/01/rl4tPN1WsqybxdK.jpg&quot; alt=&quot;屏幕截图 2021-03-01 103049.jpg&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Iterable-</summary>
      
    
    
    
    <category term="java基础" scheme="http://yoursite.com/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>「OO Lab」 - Pre</title>
    <link href="http://yoursite.com/2021/02/18/object_oriented/%E3%80%8COO%E3%80%8D-1-Pre/"/>
    <id>http://yoursite.com/2021/02/18/object_oriented/%E3%80%8COO%E3%80%8D-1-Pre/</id>
    <published>2021-02-18T07:18:06.000Z</published>
    <updated>2021-04-27T03:33:03.346Z</updated>
    
    <content type="html"><![CDATA[<h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p>在Java中<code>public static void main(String[] argv)</code>这条语句，就相当于是<code>int main()</code>，是你主程序的入口，当运行Java程序时，可以理解成将会从此处开始执行。程序入口出现的类，我们一般称做“主类”。</p><p>java类使用变量定义数据域，使用方法定义行为。除此之外，类还提供了一种称为构造方法的特殊类型的方法，调用它可以创建一个新对象。构造方法本身是可以完成任何动作的，但是设计构造方法是为了完成初始化动作，例如初始化对象的数据域。<br>封装是指隐藏对象的属性和实现细节，仅对外提供公共访问方式。这样做的优点是提高复用性、提高安全性和隐藏了实现细节。关键字private，被private修饰的成员只能在本类中使用。 对属性进行安全性的封装的一般实现步骤：</p><ol><li>对属性进行私有化。</li><li>对外提供公开的set/get方法。</li></ol><h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Bookset&gt; booksArrayList = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// for example</span></span><br><span class="line">        <span class="comment">// ArrayList </span></span><br><span class="line">        String name = <span class="string">&quot;mxdx&quot;</span>;</span><br><span class="line">        <span class="keyword">double</span> price = <span class="number">10.00</span>;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line">        Bookset book = <span class="keyword">new</span> Bookset(name, price, num);</span><br><span class="line">        <span class="comment">// 添加新元素</span></span><br><span class="line">        booksArrayList.add(book);</span><br><span class="line">        <span class="comment">// 判断是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (booksArrayList.contains(book)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;We have it!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 遍历所有元素</span></span><br><span class="line">        <span class="keyword">for</span> (Bookset item : booksArrayList) &#123;</span><br><span class="line">            System.out.println(item.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 输出容器规模</span></span><br><span class="line">        System.out.println(booksArrayList.size());</span><br><span class="line">        <span class="comment">// 删除元素</span></span><br><span class="line">        booksArrayList.remove(book);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Other: HashMap, HashSet, LinkedList......</span></span><br></pre></td></tr></table></figure><h2 id="BigDecimal-amp-BigInteger"><a href="#BigDecimal-amp-BigInteger" class="headerlink" title="BigDecimal  &amp;  BigInteger"></a>BigDecimal  &amp;  BigInteger</h2><p>用 <code>new BigDecimal</code> 这个构造函数来获取高精度小数，其结果很可能有误差。解决办法很简单，改成静态方法 <code>BigDecimal.valueOf</code> 即可，如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">BigDecimal num = <span class="keyword">new</span> BigDecimal(<span class="number">12.5</span>); <span class="comment">// Maybe Wrong Anwser</span></span><br><span class="line"><span class="comment">// Fix it like below</span></span><br><span class="line">BigDecimal num = BigDecimal.valueOf(<span class="number">12.5</span>); <span class="comment">// Exactly Correct</span></span><br></pre></td></tr></table></figure><h2 id="深拷贝-amp-浅拷贝"><a href="#深拷贝-amp-浅拷贝" class="headerlink" title="深拷贝 &amp; 浅拷贝"></a>深拷贝 &amp; 浅拷贝</h2><p>拷贝方法的出现，方便了开发人员，在对象内部数据层次复杂的情况下，不通过 <code>new</code> 关键字和众多参数的传递，来完成拷贝对象的创建。</p><p><code>Object</code> 类提供了一个受保护的 <code>clone</code> 方法，用以创建已有对象的一个浅拷贝。通过阅读 <code>Object</code> 类的源码，可以了解到的内容如下：</p><ul><li><p><code>clone</code> 方法的通用约定，在此不展开叙述。</p></li><li><p>通过重写<code>clone</code>方法，可以创建已有对象的一个深拷贝。<code>clone</code>方法的通用重写规则如下：</p><ul><li>首先，调用 <code>super.clone()</code> 。这会获得一个对象，此对象的字段与被克隆对象的字段对应相等。</li><li>而后，修改获得对象的某些字段。通常，这些字段引用的对象为可变对象，且构成了被克隆对象内部的深层结构，应当分别对其进行拷贝。如果一个类的字段仅包含基本类型和不可变对象类型，则通常没有字段需要被修改。</li></ul></li><li><p>待重写 <code>clone</code> 方法的类，应当声明实现 <code>java.lang</code> 包下的 <code>Cloneable</code> 接口，否则，调用该类的 <code>clone</code> 方法时，将抛出 <code>CloneNotSupportedException</code> 。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;封装&quot;&gt;&lt;a href=&quot;#封装&quot; class=&quot;headerlink&quot; title=&quot;封装&quot;&gt;&lt;/a&gt;封装&lt;/h2&gt;&lt;p&gt;在Java中&lt;code&gt;public static void main(String[] argv)&lt;/code&gt;这条语句，就相当于是&lt;co</summary>
      
    
    
    
    <category term="ObjectOriented" scheme="http://yoursite.com/categories/ObjectOriented/"/>
    
    
    <category term="OO" scheme="http://yoursite.com/tags/OO/"/>
    
  </entry>
  
  <entry>
    <title>「OO Lab」-0-工具链</title>
    <link href="http://yoursite.com/2021/02/17/object_oriented/%E3%80%8COO%E3%80%8D-0-%E5%B7%A5%E5%85%B7%E9%93%BE/"/>
    <id>http://yoursite.com/2021/02/17/object_oriented/%E3%80%8COO%E3%80%8D-0-%E5%B7%A5%E5%85%B7%E9%93%BE/</id>
    <published>2021-02-17T11:18:06.000Z</published>
    <updated>2021-04-26T09:05:07.335Z</updated>
    
    <content type="html"><![CDATA[<h2 id="IDEA"><a href="#IDEA" class="headerlink" title="IDEA"></a>IDEA</h2><p>Jetbrains是捷克的⼀家企业，目前其主打产品是各个现代主流语言的IDE，Idea是Jetbrains全家桶的⼀员，针对Java 这门语言的⼀些特性进⾏了进⼀步的⽤户体验优化。</p><h3 id="代码风格"><a href="#代码风格" class="headerlink" title="代码风格"></a>代码风格</h3><p>代码习惯的调整：只需要Menu -&gt; File -&gt; Settings -&gt; Editor -&gt; Code Style -&gt; Java即可找到并调整</p><p><kbd>Ctrl</kbd> + <kbd>Alt</kbd> + <kbd>L</kbd>，代码自动规范化。（有可能和网易云音乐全局快捷键冲突，如果有敲代码听歌的习惯注意去网易云关掉）</p><h3 id="import自动添加"><a href="#import自动添加" class="headerlink" title="import自动添加"></a>import自动添加</h3><p>若某个类未导入，只需将⿏标移⾄该类名上，⽤<kbd>Alt</kbd> + <kbd>Enter</kbd>从提供的类中选择需要的，完成⾃动添加。</p><h3 id="批量修改"><a href="#批量修改" class="headerlink" title="批量修改"></a>批量修改</h3><p>在类名（⽅法名、变量名、甚⾄⽂件名等也都可以）上右键-&gt;Refactor-&gt;Rename， 或者直接<kbd>Shift</kbd> + <kbd>F6</kbd>，即可直接修改名字，⽽且整个⼯程中相关的地⽅也都会⼀起随之改动，并且不会误伤到不同作⽤域类的同名实体。</p><h3 id="快速寻找我想要的功能"><a href="#快速寻找我想要的功能" class="headerlink" title="快速寻找我想要的功能"></a>快速寻找我想要的功能</h3><p>在菜单栏，点击Help –&gt; Find Action（快捷键为Ctrl + Shift + A）。可以在这⾥直接搜索想要找的功能或者设置。（实际上Jetbrains的Find Action功能提供⾮常精细的查 找，不仅仅⽀持菜单栏的查找，连内部设置的细节甚⾄都可以找得到）</p><h3 id="javadoc"><a href="#javadoc" class="headerlink" title="javadoc"></a>javadoc</h3><p>符合java⼯程规范的⽂档形式就称之为javadoc。</p><p>在方法上键入<code>/**</code>并回车，就可生成javadoc框架，然后将之补齐。</p><h2 id="常用-git"><a href="#常用-git" class="headerlink" title="常用 git"></a>常用 git</h2><h3 id="1-一仓库对应多远程源"><a href="#1-一仓库对应多远程源" class="headerlink" title="1. 一仓库对应多远程源"></a>1. 一仓库对应多远程源</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git remote rename origin task1</span><br><span class="line">git remote add task2 git@gitlab.buaaoo.top:oo_homeworks_2021&#x2F;oo_2021_pre2_19xxxxxx_pre2_task2.git</span><br><span class="line">git push task2</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;IDEA&quot;&gt;&lt;a href=&quot;#IDEA&quot; class=&quot;headerlink&quot; title=&quot;IDEA&quot;&gt;&lt;/a&gt;IDEA&lt;/h2&gt;&lt;p&gt;Jetbrains是捷克的⼀家企业，目前其主打产品是各个现代主流语言的IDE，Idea是Jetbrains全家桶的⼀员，针对</summary>
      
    
    
    
    <category term="ObjectOriented" scheme="http://yoursite.com/categories/ObjectOriented/"/>
    
    
    <category term="OO" scheme="http://yoursite.com/tags/OO/"/>
    
  </entry>
  
  <entry>
    <title>「Django」10-前后端分离</title>
    <link href="http://yoursite.com/2021/02/08/django/Django-a-%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB/"/>
    <id>http://yoursite.com/2021/02/08/django/Django-a-%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB/</id>
    <published>2021-02-08T01:43:28.000Z</published>
    <updated>2021-04-26T09:11:33.178Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-WEB应用模式"><a href="#1-WEB应用模式" class="headerlink" title="1. WEB应用模式"></a>1. WEB应用模式</h1><p>在开发Web应用中，有两种应用模式：</p><ol><li>前后端不分离</li></ol><p><img src="https://img.imgdb.cn/item/6086808bd1a9ae528f00eee5.png"></p><ol start="2"><li>前后端分离</li></ol><p><img src="https://img.imgdb.cn/item/60868031d1a9ae528ffe268d.png"></p><h1 id="2-api接口"><a href="#2-api接口" class="headerlink" title="2. api接口"></a>2. api接口</h1><p>通俗的讲就是通过url返回数据。目前市面上大部分公司开发人员使用的接口服务架构主要有：restful、rpc。</p><p><strong>rpc</strong>: 远程过程调用[远程服务调用]，通过视图函数的函数名进行调用。接口多了，对应函数名和参数就多了，前端在请求api接口时，就会比较难找，容易出现重复的接口</p><p><strong>restful</strong>: 资源状态转换。把后端所有的数据/文件都看成资源，那么接口请求数据,本质上来说就是对资源的操作了.</p><ul><li>在url中声明要操作的资源是什么,然后通过http请求的method不同来说明对资源进行哪一种操作。（基于CBV更方便实现，<code>get -&gt; 获取，post -&gt; 创建，put -&gt; 更新，delete -&gt; 删除</code>）</li></ul><h1 id="3-RESTful-API规范"><a href="#3-RESTful-API规范" class="headerlink" title="3. RESTful API规范"></a>3. RESTful API规范</h1><ul><li><p>API与用户的通信协议，总是使用<a href="http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html">HTTPs协议</a>。</p></li><li><p>域名 </p><ul><li><code>https://api.example.com </code>            尽量将API部署在专用域名（会存在跨域问题）</li><li><code>https://example.org/api/ </code>           API很简单</li></ul></li><li><p>版本</p><ul><li>URL，如：<code>https://api.example.com/v1/</code></li><li>请求头                         跨域时，引发发送多次请求</li></ul></li><li><p>路径，视网络上任何东西都是资源，均使用名词表示（可复数）</p><ul><li><code>https://api.example.com/v1/zoos</code> </li></ul></li><li><p>method</p><ul><li>GET   ：从服务器取出资源（一项或多项）</li><li>POST  ：在服务器新建一个资源</li><li>PUT   ：在服务器更新资源（客户端提供改变后的完整资源）</li><li>PATCH ：在服务器更新资源（客户端提供改变的属性）</li><li>DELETE ：从服务器删除资源</li></ul></li><li><p>过滤，通过在url上传参的形式传递搜索条件</p><ul><li><code>https://api.example.com/v1/zoos?limit=10</code>：指定返回记录的数量</li><li><code>https://api.example.com/v1/zoos?offset=10</code>：指定返回记录的开始位置</li><li><code>https://api.example.com/v1/zoos?page=2&amp;per_page=100</code>：指定第几页，以及每页的记录数</li><li><code>https://api.example.com/v1/zoos?sortby=name&amp;order=asc</code>：指定返回结果按照哪个属性排序，以及排序顺序</li><li><code>https://api.example.com/v1/zoos?animal_type_id=1</code>：指定筛选条件</li></ul></li><li><p>状态码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">200 OK - [GET]：服务器成功返回用户请求的数据，该操作是幂等的（Idempotent）。</span><br><span class="line">201 CREATED - [POST&#x2F;PUT&#x2F;PATCH]：用户新建或修改数据成功。</span><br><span class="line">202 Accepted - [*]：表示一个请求已经进入后台排队（异步任务）</span><br><span class="line">204 NO CONTENT - [DELETE]：用户删除数据成功。</span><br><span class="line">400 INVALID REQUEST - [POST&#x2F;PUT&#x2F;PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。</span><br><span class="line">401 Unauthorized - [*]：表示用户没有权限（令牌、用户名、密码错误）。</span><br><span class="line">403 Forbidden - [*] 表示用户得到授权（与401错误相对），但是访问是被禁止的。</span><br><span class="line">404 NOT FOUND - [*]：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。</span><br><span class="line">406 Not Acceptable - [GET]：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。</span><br><span class="line">410 Gone -[GET]：用户请求的资源被永久删除，且不会再得到的。</span><br><span class="line">422 Unprocesable entity - [POST&#x2F;PUT&#x2F;PATCH] 当创建一个对象时，发生一个验证错误。</span><br><span class="line">500 INTERNAL SERVER ERROR - [*]：服务器发生错误，用户将无法判断发出的请求是否成功。</span><br></pre></td></tr></table></figure></li><li><p>错误处理，状态码是4xx时，应返回错误信息，error当做key。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  error: &quot;Invalid API key&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>返回结果，针对不同操作，服务器向用户返回的结果应该符合以下规范。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;collection：返回资源对象的列表（数组）</span><br><span class="line">GET &#x2F;collection&#x2F;resource：返回单个资源对象</span><br><span class="line">POST &#x2F;collection：返回新生成的资源对象</span><br><span class="line">PUT &#x2F;collection&#x2F;resource：返回完整的资源对象</span><br><span class="line">PATCH &#x2F;collection&#x2F;resource：返回完整的资源对象</span><br><span class="line">DELETE &#x2F;collection&#x2F;resource：返回一个空文档</span><br></pre></td></tr></table></figure><ul><li>Hypermedia API，RESTful API最好做到Hypermedia，即返回结果中提供链接，连向其他API方法，使得用户不查文档，也知道下一步应该做什么。</li></ul><h1 id="4-解析器"><a href="#4-解析器" class="headerlink" title="4. 解析器"></a>4. 解析器</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.parsers <span class="keyword">import</span> JSONParser, FormParser</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ParserView</span>(<span class="params">APIView</span>):</span></span><br><span class="line">    parser_classes = [JSONParser, FormParser,]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="comment"># 可解析json头和x-www-form-urlencoded头</span></span><br><span class="line">        <span class="built_in">print</span>(request.data)</span><br></pre></td></tr></table></figure><h1 id="5-序列化"><a href="#5-序列化" class="headerlink" title="5. 序列化"></a>5. 序列化</h1><p>api接口开发，最核心最常见的一个过程就是序列化，所谓序列化就是把<strong>数据转换格式</strong>，序列化可以分两个阶段：</p><p><strong>序列化</strong>： 把我们识别的数据转换成指定的格式提供给别人。</p><p>例如：我们在django的ORM中获取到的数据默认是模型对象，但是模型对象数据无法直接提供给前端或别的平台使用，所以我们需要把数据进行序列化，变成字符串或者json数据，提供给别人。</p><p><strong>反序列化</strong>：把别人提供的数据转换/还原成我们需要的格式。</p><p>例如：前端js提供过来的json数据，对于python而言就是字符串，我们需要进行反序列化换成模型类对象，这样我们才能把数据保存到数据库中。</p><ol><li>接收数据[反序列化]</li><li>操作数据</li><li>响应数据[序列化]</li></ol><h1 id="6-Django-Rest-Framework"><a href="#6-Django-Rest-Framework" class="headerlink" title="6. Django Rest_Framework"></a>6. Django Rest_Framework</h1><p>核心思想: <strong>缩减编写api接口的代码</strong></p><p>Django REST framework是一个建立在Django基础之上的Web 应用开发框架，可以快速的开发REST API接口应用。</p><p>github: <a href="https://github.com/encode/django-rest-framework/tree/master">https://github.com/encode/django-rest-framework/tree/master</a></p><p>教程：<a href="https://www.cnblogs.com/wupeiqi/articles/7805382.html">https://www.cnblogs.com/wupeiqi/articles/7805382.html</a></p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>提供了定义序列化器Serializer的方法，可以快速根据 Django ORM 或者其它库自动序列化/反序列化；</li><li>提供了丰富的类视图、Mixin扩展类，简化视图的编写；</li><li>丰富的定制层级：函数视图、类视图、视图集合到自动生成 API，满足各种需要；</li><li>多种身份认证和权限认证方式的支持；</li><li>内置了限流系统；</li><li>直观的 API web 界面；</li><li>可扩展性，插件丰富</li></ul><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>DRF需要以下依赖：</p><ul><li>Python (2.7, 3.2, 3.3, 3.4, 3.5, 3.6)</li><li>Django (1.10, 1.11, 2.0)</li></ul><p>DRF是以Django扩展应用的方式提供的，所以我们可以直接利用已有的Django环境而无需从新创建。</p><p>在虚拟环境：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install djangorestframework</span><br><span class="line">pip install pymysql</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="1-添加rest-framework应用"><a href="#1-添加rest-framework应用" class="headerlink" title="1. 添加rest_framework应用"></a>1. 添加rest_framework应用</h3><p>创建django项目后：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">django-admin startproject drfdemo</span><br></pre></td></tr></table></figure><p>在<strong>settings.py</strong>的<strong>INSTALLED_APPS</strong>中添加’rest_framework’。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">&#x27;rest_framework&#x27;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>接下来就可以使用DRF提供的功能进行api接口开发了。在项目中如果使用rest_framework框架实现API接口，主要有以下三个步骤：</p><ul><li>将请求的数据（如JSON格式）转换为模型类对象</li><li>操作数据库</li><li>将模型类对象转换为响应的数据（如JSON格式）</li></ul><h3 id="2-编写流程"><a href="#2-编写流程" class="headerlink" title="2.编写流程"></a>2.编写流程</h3><h4 id="2-1-创建模型操作类"><a href="#2-1-创建模型操作类" class="headerlink" title="2.1 创建模型操作类"></a>2.1 创建模型操作类</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="comment"># 模型字段</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">100</span>,verbose_name=<span class="string">&quot;姓名&quot;</span>)</span><br><span class="line">    sex = models.BooleanField(default=<span class="number">1</span>,verbose_name=<span class="string">&quot;性别&quot;</span>)</span><br><span class="line">    age = models.IntegerField(verbose_name=<span class="string">&quot;年龄&quot;</span>)</span><br><span class="line">    class_null = models.CharField(max_length=<span class="number">5</span>,verbose_name=<span class="string">&quot;班级编号&quot;</span>)</span><br><span class="line">    description = models.TextField(max_length=<span class="number">1000</span>,verbose_name=<span class="string">&quot;个性签名&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table=<span class="string">&quot;tb_student&quot;</span></span><br><span class="line">        verbose_name = <span class="string">&quot;学生&quot;</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br></pre></td></tr></table></figure><p>先创建一个数据库。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database students charset&#x3D;utf8;</span><br></pre></td></tr></table></figure><p>在django项目中创建学生子应用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py startapp students</span><br></pre></td></tr></table></figure><p>把students子应用添加到INSTALLED_APPS中</p><p>主引用中<code>__init__.py</code>设置使用pymysql作为数据库驱动</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">pymysql.install_as_MySQLdb()</span><br></pre></td></tr></table></figure><p>settings.py配置文件中设置mysql的账号密码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="comment"># &#x27;default&#x27;: &#123;</span></span><br><span class="line">    <span class="comment">#     &#x27;ENGINE&#x27;: &#x27;django.db.backends.sqlite3&#x27;,</span></span><br><span class="line">    <span class="comment">#     &#x27;NAME&#x27;: os.path.join(BASE_DIR, &#x27;db.sqlite3&#x27;),</span></span><br><span class="line">    <span class="comment"># &#125;,</span></span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.mysql&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&quot;students&quot;</span>,</span><br><span class="line">        <span class="string">&quot;HOST&quot;</span>: <span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;PORT&quot;</span>: <span class="number">3306</span>,</span><br><span class="line">        <span class="string">&quot;USER&quot;</span>: <span class="string">&quot;root&quot;</span>,</span><br><span class="line">        <span class="string">&quot;PASSWORD&quot;</span>:<span class="string">&quot;123&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>终端下，执行数据迁移。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python manage.py makemigrations</span><br><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure><h4 id="2-2-创建序列化器"><a href="#2-2-创建序列化器" class="headerlink" title="2.2 创建序列化器"></a>2.2 创建序列化器</h4><p>在students应用目录中新建serializers.py用于保存该应用的序列化器。</p><p>创建一个StudentModelSerializer用于序列化与反序列化。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建序列化器类，回头会在视图中被调用</span></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Student</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentModelSerializer</span>(<span class="params">serializers.ModelSerializer</span>):</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Student</span><br><span class="line">        fields = <span class="string">&quot;__all__&quot;</span></span><br></pre></td></tr></table></figure><ul><li><strong>model</strong> 指明该序列化器处理的数据字段从模型类Student参考生成</li><li><strong>fields</strong> 指明该序列化器包含模型类中的哪些字段，<code>__all__</code>指明包含所有字段</li></ul><h4 id="2-3-编写视图"><a href="#2-3-编写视图" class="headerlink" title="2.3 编写视图"></a>2.3 编写视图</h4><p>在students应用的views.py中创建视图StudentViewSet，这是一个视图集合。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ModelViewSet</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Student</span><br><span class="line"><span class="keyword">from</span> .serializers <span class="keyword">import</span> StudentModelSerializer</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentViewSet</span>(<span class="params">ModelViewSet</span>):</span></span><br><span class="line">    queryset = Student.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = StudentModelSerializer</span><br></pre></td></tr></table></figure><ul><li><strong>queryset</strong> 指明该视图集在查询数据时使用的查询集</li><li><strong>serializer_class</strong> 指明该视图在进行序列化或反序列化时使用的序列化器</li></ul><p>建议继承：</p><ul><li>增删改查   →   ModelViewSet</li><li>增删   →   CreateModelMixin， DestroyModelMixin， GenericViewSet</li></ul><h4 id="2-4-定义路由"><a href="#2-4-定义路由" class="headerlink" title="2.4 定义路由"></a>2.4 定义路由</h4><p>在students应用的urls.py中定义路由信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"><span class="keyword">from</span> rest_framework.routers <span class="keyword">import</span> DefaultRouter</span><br><span class="line"></span><br><span class="line"><span class="comment"># 路由列表</span></span><br><span class="line">urlpatterns = []</span><br><span class="line"></span><br><span class="line">router = DefaultRouter()  <span class="comment"># 可以处理视图的路由器</span></span><br><span class="line">router.register(<span class="string">&#x27;students&#x27;</span>, views.StudentViewSet)  <span class="comment"># 向路由器中注册视图集</span></span><br><span class="line"></span><br><span class="line">urlpatterns += router.urls  <span class="comment"># 将路由器中的所有路由信息追到到django的路由列表中</span></span><br></pre></td></tr></table></figure><p>最后把students子应用中的路由文件加载到总路由文件中.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path,include</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">&quot;stu/&quot;</span>,include(<span class="string">&quot;students.urls&quot;</span>)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="3-序列化器-Serializer"><a href="#3-序列化器-Serializer" class="headerlink" title="3. 序列化器-Serializer"></a>3. 序列化器-Serializer</h3><p>作用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 序列化,序列化器会把模型对象转换成字典,经过response以后变成json字符串</span><br><span class="line">2. 反序列化,把客户端发送过来的数据,经过request以后变成字典,序列化器可以把字典转成模型</span><br><span class="line">3. 反序列化,完成数据校验功能</span><br></pre></td></tr></table></figure><h4 id="3-1-定义序列化器"><a href="#3-1-定义序列化器" class="headerlink" title="3.1 定义序列化器"></a>3.1 定义序列化器</h4><p>先创建一个新的子应用sers</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py startapp sers</span><br></pre></td></tr></table></figure><p>我们已有了一个数据库模型类students/Student，现在想为这个模型类提供一个序列化器，可以定义如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"></span><br><span class="line"><span class="comment"># 声明序列化器，所有的序列化器都要直接或者间接继承于 Serializer</span></span><br><span class="line"><span class="comment"># 其中，ModelSerializer是Serializer的子类，ModelSerializer在Serializer的基础上进行了代码简化</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentSerializer</span>(<span class="params">serializers.Serializer</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;学生信息序列化器&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 1. 需要进行数据转换的字段</span></span><br><span class="line">    <span class="built_in">id</span> = serializers.IntegerField()</span><br><span class="line">    name = serializers.CharField()</span><br><span class="line">    age = serializers.IntegerField()</span><br><span class="line">    sex = serializers.BooleanField()</span><br><span class="line">    description = serializers.CharField()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. 如果序列化器集成的是ModelSerializer，则需要声明调用的模型信息</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3. 验证代码</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 4. 编写添加和更新模型的代码</span></span><br></pre></td></tr></table></figure><p><strong>注意：serializer不是只能为数据库模型类定义，也可以为非数据库模型类的数据定义。</strong>serializer是独立于数据库之外的存在。</p><p>自定义显示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfoSerializer</span>(<span class="params">serializers.Serializer</span>):</span></span><br><span class="line">    xxx = serializers.CharField(source=<span class="string">&quot;user_type&quot;</span>) <span class="comment"># row.user_type</span></span><br><span class="line">    ooo = serializers.CharField(source=<span class="string">&quot;get_user_type_display&quot;</span>) <span class="comment"># row.get_user_type_display</span></span><br><span class="line">    gp = serializers.CharField(source=<span class="string">&quot;group.title&quot;</span>)</span><br><span class="line">    rls = serializers.SerializerMethodField() </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_rls</span>(<span class="params">self, row</span>):</span><span class="comment"># 需以get开头</span></span><br><span class="line">        row_obj_list = row.roles.<span class="built_in">all</span>()</span><br><span class="line">        ret = []</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> role_obj_list:</span><br><span class="line">            ret.append(&#123;<span class="string">&#x27;id&#x27;</span>:item.<span class="built_in">id</span>, <span class="string">&#x27;title&#x27;</span>:item.title&#125;)</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    user_type_choices = (</span><br><span class="line">        (<span class="number">1</span>, <span class="string">&#x27;普通用户&#x27;</span>),</span><br><span class="line">        (<span class="number">2</span>, <span class="string">&#x27;VIP&#x27;</span>),</span><br><span class="line">        (<span class="number">3</span>, <span class="string">&#x27;SVIP&#x27;</span>),</span><br><span class="line">    )</span><br><span class="line">    user_type = models.IntegerField(choices=user_type_choices)</span><br><span class="line">    group = models.ForeignKey(<span class="string">&quot;UserGroup&quot;</span>)</span><br><span class="line">    roles = models.ManyToManyField(<span class="string">&quot;Role&quot;</span>)</span><br></pre></td></tr></table></figure><p>ModelSerializer：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfoSerializer</span>(<span class="params">serializers.ModelSerializers</span>):</span></span><br><span class="line">    ooo = serializers.CharField(source=<span class="string">&quot;get_user_type_display&quot;</span>)</span><br><span class="line">    rls = serializers.SerializerMethodField() </span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = models.UserInfo</span><br><span class="line">        <span class="comment"># fields = &quot;__all__&quot; # -&gt; 将所有字段自动帮忙生成序列化</span></span><br><span class="line">        fields = &#123;<span class="string">&#x27;id&#x27;</span>,<span class="string">&#x27;username&#x27;</span>,<span class="string">&#x27;password&#x27;</span>,<span class="string">&#x27;group&#x27;</span>&#125; </span><br><span class="line">        <span class="comment"># 自主定义序列化字段</span></span><br></pre></td></tr></table></figure><p>序列化深度：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfoSerializer</span>(<span class="params">serializers.ModelSerializers</span>):</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = models.UserInfo</span><br><span class="line">        fields = &#123;<span class="string">&#x27;id&#x27;</span>,<span class="string">&#x27;username&#x27;</span>,<span class="string">&#x27;password&#x27;</span>,<span class="string">&#x27;group&#x27;</span>,<span class="string">&#x27;roles&#x27;</span>&#125; </span><br><span class="line">        depth = <span class="number">1</span></span><br><span class="line">        <span class="comment"># 自动序列化链表，取到关联的第一层表的字段</span></span><br></pre></td></tr></table></figure><p>请求数据校验 &amp;&amp; 生成URL：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url, include</span><br><span class="line"><span class="keyword">from</span> web.views.s6_serializers <span class="keyword">import</span> TestView</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r&#x27;test/&#x27;</span>, TestView.as_view(), name=<span class="string">&#x27;test&#x27;</span>),</span><br><span class="line">    url(<span class="string">r&#x27;detail/(?P&lt;pk&gt;\d+)/&#x27;</span>, TestView.as_view(), name=<span class="string">&#x27;detail&#x27;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> .. <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PasswordValidator</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, base</span>):</span></span><br><span class="line">        self.base = <span class="built_in">str</span>(base)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        <span class="keyword">if</span> value != self.base:</span><br><span class="line">            message = <span class="string">&#x27;This field must be %s.&#x27;</span> % self.base</span><br><span class="line">            <span class="keyword">raise</span> serializers.ValidationError(message)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_context</span>(<span class="params">self, serializer_field</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        This hook is called by the serializer instance,</span></span><br><span class="line"><span class="string">        prior to the validation call being made.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 执行验证之前调用,serializer_fields是当前字段对象</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ModelUserSerializer</span>(<span class="params">serializers.ModelSerializer</span>):</span></span><br><span class="line">    ut = serializers.HyperlinkedIdentityField(view_name=<span class="string">&#x27;detail&#x27;</span>)</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = models.UserInfo</span><br><span class="line">        fields = <span class="string">&quot;__all__&quot;</span></span><br><span class="line"></span><br><span class="line">        extra_kwargs = &#123;</span><br><span class="line">            <span class="string">&#x27;user&#x27;</span>: &#123;<span class="string">&#x27;min_length&#x27;</span>: <span class="number">6</span>&#125;,</span><br><span class="line">            <span class="string">&#x27;pwd&#x27;</span>: &#123;<span class="string">&#x27;validators&#x27;</span>: [PasswordValidator(<span class="number">666</span>),]&#125;,</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestView</span>(<span class="params">APIView</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 序列化，将数据库查询字段序列化为字典</span></span><br><span class="line">        data_list = models.UserInfo.objects.<span class="built_in">all</span>()</span><br><span class="line">        ser = ModelUserSerializer(instance=data_list, many=<span class="literal">True</span>, context=&#123;<span class="string">&#x27;request&#x27;</span>: request&#125;)</span><br><span class="line">        <span class="comment"># 或</span></span><br><span class="line">        <span class="comment"># obj = models.UserInfo.objects.all().first()</span></span><br><span class="line">        <span class="comment"># ser = UserSerializer(instance=obj, many=False)</span></span><br><span class="line">        <span class="keyword">return</span> Response(ser.data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="comment"># 验证，对请求发来的数据进行验证</span></span><br><span class="line">        <span class="built_in">print</span>(request.data)</span><br><span class="line">        ser = ModelUserSerializer(data=request.data)</span><br><span class="line">        <span class="keyword">if</span> ser.is_valid():</span><br><span class="line">            <span class="built_in">print</span>(ser.validated_data)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(ser.errors)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Response(<span class="string">&#x27;POST请求，响应内容&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>常用字段类型</strong>：</p><table><thead><tr><th>字段</th><th>字段构造方式 serializers.字段构造方式()</th></tr></thead><tbody><tr><td><strong>BooleanField</strong></td><td>BooleanField()</td></tr><tr><td><strong>NullBooleanField</strong></td><td>NullBooleanField()</td></tr><tr><td><strong>CharField</strong></td><td>CharField(max_length=None, min_length=None, allow_blank=False, trim_whitespace=True)</td></tr><tr><td><strong>EmailField</strong></td><td>EmailField(max_length=None, min_length=None, allow_blank=False)</td></tr><tr><td><strong>RegexField</strong></td><td>RegexField(regex, max_length=None, min_length=None, allow_blank=False)</td></tr><tr><td><strong>SlugField</strong></td><td>SlugField(max<em>length=50, min_length=None, allow_blank=False) 正则字段，验证正则模式 [a-zA-Z0-9</em>-]+</td></tr><tr><td><strong>URLField</strong></td><td>URLField(max_length=200, min_length=None, allow_blank=False)</td></tr><tr><td><strong>UUIDField</strong></td><td>UUIDField(format=’hex_verbose’) format: 1) <code>&#39;hex_verbose&#39;</code> 如<code>&quot;5ce0e9a5-5ffa-654b-cee0-1238041fb31a&quot;</code> 2) <code>&#39;hex&#39;</code> 如 <code>&quot;5ce0e9a55ffa654bcee01238041fb31a&quot;</code> 3) <code>&#39;int&#39;</code> - 如: <code>&quot;123456789012312313134124512351145145114&quot;</code> 4) <code>&#39;urn&#39;</code> 如: <code>&quot;urn:uuid:5ce0e9a5-5ffa-654b-cee0-1238041fb31a&quot;</code></td></tr><tr><td><strong>IPAddressField</strong></td><td>IPAddressField(protocol=’both’, unpack_ipv4=False, **options)</td></tr><tr><td><strong>IntegerField</strong></td><td>IntegerField(max_value=None, min_value=None)</td></tr><tr><td><strong>FloatField</strong></td><td>FloatField(max_value=None, min_value=None)</td></tr><tr><td><strong>DecimalField</strong></td><td>DecimalField(max_digits, decimal_places, coerce_to_string=None, max_value=None, min_value=None) max_digits: 最多位数 decimal_palces: 小数点位置</td></tr><tr><td><strong>DateTimeField</strong></td><td>DateTimeField(format=api_settings.DATETIME_FORMAT, input_formats=None)</td></tr><tr><td><strong>DateField</strong></td><td>DateField(format=api_settings.DATE_FORMAT, input_formats=None)</td></tr><tr><td><strong>TimeField</strong></td><td>TimeField(format=api_settings.TIME_FORMAT, input_formats=None)</td></tr><tr><td><strong>DurationField</strong></td><td>DurationField()</td></tr><tr><td><strong>ChoiceField</strong></td><td>ChoiceField(choices) choices与Django的用法相同</td></tr><tr><td><strong>MultipleChoiceField</strong></td><td>MultipleChoiceField(choices)</td></tr><tr><td><strong>FileField</strong></td><td>FileField(max_length=None, allow_empty_file=False, use_url=UPLOADED_FILES_USE_URL)</td></tr><tr><td><strong>ImageField</strong></td><td>ImageField(max_length=None, allow_empty_file=False, use_url=UPLOADED_FILES_USE_URL)</td></tr><tr><td><strong>ListField</strong></td><td>ListField(child=, min_length=None, max_length=None)</td></tr><tr><td><strong>DictField</strong></td><td>DictField(child=)</td></tr></tbody></table><p><strong>选项参数：</strong></p><table><thead><tr><th>参数名称</th><th>作用</th></tr></thead><tbody><tr><td><strong>max_length</strong></td><td>最大长度</td></tr><tr><td><strong>min_length</strong></td><td>最小长度</td></tr><tr><td><strong>allow_blank</strong></td><td>是否允许为空</td></tr><tr><td><strong>trim_whitespace</strong></td><td>是否截断空白字符</td></tr><tr><td><strong>max_value</strong></td><td>最大数值</td></tr><tr><td><strong>min_value</strong></td><td>最小数值</td></tr></tbody></table><p>通用参数：</p><table><thead><tr><th>参数名称</th><th>说明</th></tr></thead><tbody><tr><td><strong>read_only</strong></td><td>表明该字段仅用于序列化输出，默认False</td></tr><tr><td><strong>write_only</strong></td><td>表明该字段仅用于反序列化输入，默认False</td></tr><tr><td><strong>required</strong></td><td>表明该字段在反序列化时必须输入，默认True</td></tr><tr><td><strong>default</strong></td><td>反序列化时使用的默认值</td></tr><tr><td><strong>allow_null</strong></td><td>表明该字段是否允许传入None，默认False</td></tr><tr><td><strong>validators</strong></td><td>该字段使用的验证器</td></tr><tr><td><strong>error_messages</strong></td><td>包含错误编号与错误信息的字典</td></tr><tr><td><strong>label</strong></td><td>用于HTML展示API页面时，显示的字段名称</td></tr><tr><td><strong>help_text</strong></td><td>用于HTML展示API页面时，显示的字段帮助提示信息</td></tr></tbody></table><h4 id="3-2-创建Serializer对象"><a href="#3-2-创建Serializer对象" class="headerlink" title="3.2 创建Serializer对象"></a>3.2 创建Serializer对象</h4><p>定义好Serializer类后，就可以创建Serializer对象了。</p><p>Serializer的构造方法为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Serializer(instance=<span class="literal">None</span>, data=empty, **kwarg)</span><br></pre></td></tr></table></figure><p>说明：</p><p>1）用于序列化时，将模型类对象传入<strong>instance</strong>参数</p><p>2）用于反序列化时，将要被反序列化的数据传入<strong>data</strong>参数</p><p>3）除了instance和data参数外，在构造Serializer对象时，还可通过<strong>context</strong>参数额外添加数据，如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">serializer = StudentSerializer(instance, context=&#123;<span class="string">&#x27;request&#x27;</span>: request&#125;)</span><br></pre></td></tr></table></figure><p><strong>通过context参数附加的数据，可以通过Serializer对象的context属性获取。</strong></p><ol><li>使用序列化器的时候一定要注意，序列化器声明了以后，不会自动执行，需要我们在视图中进行调用才可以。</li><li>序列化器无法直接接收数据，需要我们在视图中创建序列化器对象时把使用的数据传递过来。</li><li>序列化器的字段声明类似于form表单系统。</li><li>开发restful api时，序列化器会帮我们把模型数据转换成字典.</li><li>drf提供的视图会帮我们把字典转换成json,或者把客户端发送过来的数据转换字典.</li></ol><h4 id="3-3-序列化器的使用"><a href="#3-3-序列化器的使用" class="headerlink" title="3.3 序列化器的使用"></a>3.3 序列化器的使用</h4><p>序列化器的使用分两个阶段：</p><ol><li>在客户端请求时，使用序列化器可以完成对数据的反序列化。</li><li>在服务器响应时，使用序列化器可以完成对数据的序列化。</li></ol><h5 id="1-序列化"><a href="#1-序列化" class="headerlink" title="1. 序列化"></a>1. 序列化</h5><p>先查询出一个学生对象，再构造序列化器对象，然后获取序列化数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> View</span><br><span class="line"><span class="keyword">from</span> students.models <span class="keyword">import</span> Student</span><br><span class="line"><span class="keyword">from</span> .serializers <span class="keyword">import</span> StudentSerializer</span><br><span class="line"><span class="keyword">from</span> django.http.response <span class="keyword">import</span> JsonResponse</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentRetrieveView</span>(<span class="params">View</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;使用序列化器序列化转换单个模型数据&quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self,request,pk</span>):</span></span><br><span class="line">        <span class="comment"># 获取数据</span></span><br><span class="line">        student = Student.objects.get(pk=pk)</span><br><span class="line">        <span class="comment"># 数据转换[序列化过程]</span></span><br><span class="line">        serializer = StudentSerializer(instance=student)</span><br><span class="line">        <span class="built_in">print</span>(serializer.data)</span><br><span class="line">        <span class="comment"># 响应数据</span></span><br><span class="line">        <span class="keyword">return</span> JsonResponse(serializer.data)</span><br></pre></td></tr></table></figure><p>如果要被序列化的是包含多条数据的查询集QuerySet，可以通过添加<strong>many=True</strong>参数补充说明</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentView</span>(<span class="params">View</span>):</span>    </span><br><span class="line">    <span class="string">&quot;&quot;&quot;使用序列化器序列化转换多个模型数据&quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self,request</span>):</span></span><br><span class="line">        <span class="comment"># 获取数据</span></span><br><span class="line">        student_list = Student.objects.<span class="built_in">all</span>()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 转换数据[序列化过程]</span></span><br><span class="line">        <span class="comment"># 如果转换多个模型对象数据，则需要加上many=True</span></span><br><span class="line">        serializer = StudentSerializer(instance=student_list,many=<span class="literal">True</span>)</span><br><span class="line">        <span class="built_in">print</span>( serializer.data ) <span class="comment"># 序列化器转换后的数据</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 响应数据给客户端</span></span><br><span class="line">        <span class="comment"># 返回的json数据，如果是列表，则需要声明safe=False</span></span><br><span class="line">        <span class="keyword">return</span> JsonResponse(serializer.data,safe=<span class="literal">False</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 访问结果：</span></span><br><span class="line">    <span class="comment"># [OrderedDict([(&#x27;id&#x27;, 1), (&#x27;name&#x27;, &#x27;xiaoming&#x27;), (&#x27;age&#x27;, 20), (&#x27;sex&#x27;, True), (&#x27;description&#x27;, &#x27;测试&#x27;)]), OrderedDict([(&#x27;id&#x27;, 2), (&#x27;name&#x27;, &#x27;xiaohui&#x27;), (&#x27;age&#x27;, 22), (&#x27;sex&#x27;, True), (&#x27;description&#x27;, &#x27;后面来的测试&#x27;)])]</span></span><br></pre></td></tr></table></figure><h5 id="2-反序列化"><a href="#2-反序列化" class="headerlink" title="2. 反序列化"></a>2. 反序列化</h5><h6 id="2-1-数据验证"><a href="#2-1-数据验证" class="headerlink" title="2.1. 数据验证"></a>2.1. 数据验证</h6><blockquote><p>使用序列化器进行反序列化时，需要对数据进行验证后，才能获取验证成功的数据或保存成模型类对象，即调用<code>is_valid()</code>方法，验证成功返回True，否则返回False。</p></blockquote><blockquote><p>验证失败，可以通过序列化器对象的<strong>errors</strong>属性获取错误信息，返回字典，包含了字段和字段的错误。如果是非字段错误，可以通过修改REST framework配置中的<strong>NON_FIELD_ERRORS_KEY</strong>来控制错误字典中的键名。</p><p>验证成功，可以通过序列化器对象的<strong>validated_data</strong>属性获取数据。</p></blockquote><blockquote><p>在定义序列化器时，指明每个字段的序列化类型和选项参数，本身就是一种验证行为。</p></blockquote><p>新建一个子应用books。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py startapp books</span><br></pre></td></tr></table></figure><p>在settings.py中的INSTALLED_APPS中新增books子应用。如我们定义一个图书的模型和序列化器，</p><p>Book模型，代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;图书模型&quot;&quot;&quot;</span></span><br><span class="line">    title = models.CharField(verbose_name=<span class="string">&#x27;名称&#x27;</span>, max_length=<span class="number">20</span>)</span><br><span class="line">    pub_date = models.DateField(verbose_name=<span class="string">&#x27;发布日期&#x27;</span>)</span><br><span class="line">    read = models.IntegerField(verbose_name=<span class="string">&#x27;阅读量&#x27;</span>,default=<span class="number">0</span>)</span><br><span class="line">    comment = models.IntegerField(verbose_name=<span class="string">&#x27;评论量&#x27;</span>, null=<span class="literal">True</span>, blank=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">&quot;tb_book&quot;</span></span><br><span class="line">        verbose_name=<span class="string">&quot;图书&quot;</span></span><br><span class="line">        verbose_name_plural=verbose_name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.title</span><br></pre></td></tr></table></figure><p>执行数据迁移，代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python manage.py makemigrations</span><br><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure><p>BookSerializer序列化器，代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookSerializer</span>(<span class="params">serializers.Serializer</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;图书数据序列化器&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">id</span> = serializers.IntegerField(label=<span class="string">&#x27;ID&#x27;</span>, read_only=<span class="literal">True</span>)</span><br><span class="line">    title = serializers.CharField(label=<span class="string">&#x27;名称&#x27;</span>, max_length=<span class="number">20</span>)</span><br><span class="line">    pub_date = serializers.DateField(label=<span class="string">&#x27;发布日期&#x27;</span>, required=<span class="literal">False</span>)</span><br><span class="line">    read = serializers.IntegerField(label=<span class="string">&#x27;阅读量&#x27;</span>, required=<span class="literal">False</span>)</span><br><span class="line">    comment = serializers.IntegerField(label=<span class="string">&#x27;评论量&#x27;</span>, required=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>通过构造序列化器对象，并将要反序列化的数据传递给data构造参数，进而进行验证</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> book.serializers <span class="keyword">import</span> BookSerializer</span><br><span class="line">data = &#123;<span class="string">&#x27;pub_date&#x27;</span>: <span class="number">123</span>&#125;</span><br><span class="line">serializer = BookSerializer(data=data)</span><br><span class="line">serializer.is_valid()  <span class="comment"># 返回False</span></span><br><span class="line">serializer.errors</span><br><span class="line"><span class="comment"># &#123;&#x27;title&#x27;: [ErrorDetail(string=&#x27;This field is required.&#x27;, code=&#x27;required&#x27;)], &#x27;pub_date&#x27;: [ErrorDetail(string=&#x27;Date has wrong format. Use one of these formats instead: YYYY[-MM[-DD]].&#x27;, code=&#x27;invalid&#x27;)]&#125;</span></span><br><span class="line">serializer.validated_data  <span class="comment"># &#123;&#125;</span></span><br><span class="line"></span><br><span class="line">data = &#123;<span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;python&#x27;</span>&#125;</span><br><span class="line">serializer = BookSerializer(data=data)</span><br><span class="line">serializer.is_valid()  <span class="comment"># True   验证结果返回值</span></span><br><span class="line">serializer.errors  <span class="comment"># &#123;&#125;  错误信息</span></span><br><span class="line">serializer.validated_data  <span class="comment">#  OrderedDict([(&#x27;btitle&#x27;, &#x27;python&#x27;)])</span></span><br></pre></td></tr></table></figure><p>is_valid()方法还可以在验证失败时抛出异常serializers.ValidationError，可以通过传递<strong>raise_exception=True</strong>参数开启，REST framework接收到此异常，会向前端返回HTTP 400 Bad Request响应。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Return a 400 response if the data was invalid.</span></span><br><span class="line">serializer.is_valid(raise_exception=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>如果觉得这些还不够，需要再补充定义验证行为，可以使用以下三种方法：</p><p><strong>1）validate_字段名</strong></p><p>对<code>&lt;field_name&gt;</code>字段进行验证，如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookSerializer</span>(<span class="params">serializers.Serializer</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;图书数据序列化器&quot;&quot;&quot;</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate_title</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;django&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> value.lower():</span><br><span class="line">            <span class="keyword">raise</span> serializers.ValidationError(<span class="string">&quot;图书不是关于Django的&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> value</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> book.serializers <span class="keyword">import</span> BookSerializer</span><br><span class="line">data = &#123;<span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;python&#x27;</span>&#125;</span><br><span class="line">serializer = BookSerializer(data=data)</span><br><span class="line">serializer.is_valid()  <span class="comment"># False   </span></span><br><span class="line">serializer.errors</span><br><span class="line"><span class="comment">#  &#123;&#x27;title&#x27;: [ErrorDetail(string=&#x27;图书不是关于Django的&#x27;, code=&#x27;invalid&#x27;)]&#125;</span></span><br></pre></td></tr></table></figure><p><strong>2) validate</strong></p><p>在序列化器中需要同时对多个字段进行比较验证时，可以定义validate方法来验证，如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookSerializer</span>(<span class="params">serializers.Serializer</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;图书序列化器&quot;&quot;&quot;</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate</span>(<span class="params">self, attrs</span>):</span></span><br><span class="line">        read = attrs[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">        comment = attrs[<span class="string">&#x27;comment&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> read &lt; comment:</span><br><span class="line">            <span class="keyword">raise</span> serializers.ValidationError(<span class="string">&#x27;阅读量小于评论量，不可以通过&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> attrs</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> book.serializers <span class="keyword">import</span> BookSerializer</span><br><span class="line">data = &#123;<span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;about django&#x27;</span>, <span class="string">&#x27;read&#x27;</span>: <span class="number">10</span>, <span class="string">&#x27;comment&#x27;</span>: <span class="number">20</span>&#125;</span><br><span class="line">s = BookSerializer(data=data)</span><br><span class="line">s.is_valid()  <span class="comment"># False</span></span><br><span class="line">s.errors</span><br><span class="line"><span class="comment">#  &#123;&#x27;non_field_errors&#x27;: [ErrorDetail(string=&#x27;阅读量小于评论量&#x27;, code=&#x27;invalid&#x27;)]&#125;</span></span><br></pre></td></tr></table></figure><p><strong>3) validators</strong></p><p>在字段中添加validators选项参数，也可以补充验证行为，如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">about_django</span>(<span class="params">value</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;django&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> value.lower():</span><br><span class="line">        <span class="keyword">raise</span> serializers.ValidationError(<span class="string">&quot;图书不是关于Django的&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookSerializer</span>(<span class="params">serializers.Serializer</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;图书序列化器&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">id</span> = serializers.IntegerField(label=<span class="string">&#x27;ID&#x27;</span>, read_only=<span class="literal">True</span>)</span><br><span class="line">    title = serializers.CharField(label=<span class="string">&#x27;名称&#x27;</span>, max_length=<span class="number">20</span>, validators=[about_django])</span><br><span class="line">    pub_date = serializers.DateField(label=<span class="string">&#x27;发布日期&#x27;</span>, required=<span class="literal">False</span>)</span><br><span class="line">    read = serializers.IntegerField(label=<span class="string">&#x27;阅读量&#x27;</span>, required=<span class="literal">False</span>)</span><br><span class="line">    comment = serializers.IntegerField(label=<span class="string">&#x27;评论量&#x27;</span>, required=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> book.serializers <span class="keyword">import</span> BookSerializer</span><br><span class="line">data = &#123;<span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;python&#x27;</span>&#125;</span><br><span class="line">serializer = BookSerializer(data=data)</span><br><span class="line">serializer.is_valid()  <span class="comment"># False   </span></span><br><span class="line">serializer.errors</span><br><span class="line"><span class="comment">#  &#123;&#x27;title&#x27;: [ErrorDetail(string=&#x27;图书不是关于Django的&#x27;, code=&#x27;invalid&#x27;)]&#125;</span></span><br></pre></td></tr></table></figure><h6 id="2-2-保存数据"><a href="#2-2-保存数据" class="headerlink" title="2.2. 保存数据"></a>2.2. 保存数据</h6><p>验证数据成功后,我们可以使用序列化器来完成数据反序列化的过程.这个过程可以把数据转成模型类对象.</p><p>可以通过实现create()和update()两个方法来实现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookSerializer</span>(<span class="params">serializers.Serializer</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;图书数据序列化器&quot;&quot;&quot;</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create</span>(<span class="params">self, validated_data</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;新建&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> Book(**validated_data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span>(<span class="params">self, instance, validated_data</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;更新，instance为要更新的对象实例&quot;&quot;&quot;</span></span><br><span class="line">        instance.title = validated_data.get(<span class="string">&#x27;title&#x27;</span>, instance.title)</span><br><span class="line">        instance.pub_date = validated_data.get(<span class="string">&#x27;pub_date&#x27;</span>, instance.pub_date)</span><br><span class="line">        instance.read = validated_data.get(<span class="string">&#x27;read&#x27;</span>, instance.read)</span><br><span class="line">        instance.comment = validated_data.get(<span class="string">&#x27;comment&#x27;</span>, instance.comment)</span><br><span class="line">        instance.save()</span><br><span class="line">        <span class="keyword">return</span> instance</span><br></pre></td></tr></table></figure><p>如果需要在返回数据对象的时候，也<strong>将数据保存到数据库中</strong>，则可以进行如下修改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookSerializer</span>(<span class="params">serializers.Serializer</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;图书数据序列化器&quot;&quot;&quot;</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create</span>(<span class="params">self, validated_data</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;新建&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> Book.objects.create(**validated_data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span>(<span class="params">self, instance, validated_data</span>):</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>实现了上述两个方法后，在反序列化数据的时候，就可以通过save()方法返回一个数据对象实例了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">book = serializer.save()</span><br></pre></td></tr></table></figure><p>如果创建序列化器对象的时候，没有传递instance实例，则调用save()方法的时候，create()被调用，相反，如果传递了instance实例，则调用save()方法的时候，update()被调用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> .serializers <span class="keyword">import</span> BookSerializer</span><br><span class="line">data = &#123;<span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;python入门指南&#x27;</span>&#125;</span><br><span class="line">serializer = BookSerializer(data=data)</span><br><span class="line">serializer.is_valid()  <span class="comment"># True</span></span><br><span class="line">serializer.save()  <span class="comment"># &lt;BookInfo: python入门指南&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Book</span><br><span class="line">book = Book.objects.get(<span class="built_in">id</span>=<span class="number">2</span>)</span><br><span class="line">data = &#123;<span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;django入门指南&#x27;</span>&#125;</span><br><span class="line">serializer = BookSerializer(book, data=data)</span><br><span class="line">serializer.is_valid()  <span class="comment"># True</span></span><br><span class="line">serializer.save()  <span class="comment"># &lt;BookInfo: django入门指南&gt;</span></span><br><span class="line">book.title  <span class="comment"># &#x27;django入门指南&#x27;</span></span><br></pre></td></tr></table></figure><h6 id="2-3-附加说明"><a href="#2-3-附加说明" class="headerlink" title="2.3 附加说明"></a>2.3 附加说明</h6><p>1） 在对序列化器进行save()保存时，可以额外传递数据，这些数据可以在create()和update()中的validated_data参数获取到</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># request.user 是django中记录当前登录用户的模型对象</span></span><br><span class="line">serializer.save(自定义字段名=request.user)</span><br></pre></td></tr></table></figure><p>2）默认序列化器必须传递所有required的字段，否则会抛出验证异常。但是我们可以使用partial参数来允许部分字段更新</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Update `comment` with partial data</span></span><br><span class="line">serializer = CommentSerializer(comment, data=&#123;<span class="string">&#x27;content&#x27;</span>: <span class="string">u&#x27;foo bar&#x27;</span>&#125;, partial=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h4 id="3-4-模型类序列化器"><a href="#3-4-模型类序列化器" class="headerlink" title="3.4 模型类序列化器"></a>3.4 模型类序列化器</h4><p>如果我们想要使用序列化器对应的是Django的模型类，DRF为我们提供了ModelSerializer模型类序列化器来帮助我们快速创建一个Serializer类。</p><p>ModelSerializer与常规的Serializer相同，但提供了：</p><ul><li>基于模型类自动生成一系列字段</li><li>基于模型类自动为Serializer生成validators，比如unique_together</li><li>包含默认的create()和update()的实现</li></ul><h5 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h5><p>比如我们创建一个BookSerializer</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookSerializer</span>(<span class="params">serializers.ModelSerializer</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;图书数据序列化器&quot;&quot;&quot;</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Book</span><br><span class="line">        fields = <span class="string">&#x27;__all__&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>model 指明参照哪个模型类</li><li>fields 指明为模型类的哪些字段生成</li></ul><p>我们可以在python manage.py shell中查看自动生成的BookSerializer的具体实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> booktest.serializers <span class="keyword">import</span> BookSerializer</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>serializer = BookSerializer()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>serializer</span><br><span class="line">BookSerializer():</span><br><span class="line">    <span class="built_in">id</span> = IntegerField(label=<span class="string">&#x27;ID&#x27;</span>, read_only=<span class="literal">True</span>)</span><br><span class="line">    title = CharField(label=<span class="string">&#x27;名称&#x27;</span>, max_length=<span class="number">20</span>)</span><br><span class="line">    pub_date = DateField(allow_null=<span class="literal">True</span>, label=<span class="string">&#x27;发布日期&#x27;</span>, required=<span class="literal">False</span>)</span><br><span class="line">    read = IntegerField(label=<span class="string">&#x27;阅读量&#x27;</span>, max_value=<span class="number">2147483647</span>, min_value=-<span class="number">2147483648</span>, required=<span class="literal">False</span>)</span><br><span class="line">    comment = IntegerField(label=<span class="string">&#x27;评论量&#x27;</span>, max_value=<span class="number">2147483647</span>, min_value=-<span class="number">2147483648</span>, required=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><h5 id="2-指定字段"><a href="#2-指定字段" class="headerlink" title="2. 指定字段"></a>2. 指定字段</h5><ol><li>使用<strong>fields</strong>来明确字段，<code>__all__</code>表名包含所有字段，也可以写明具体哪些字段，如</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookSerializer</span>(<span class="params">serializers.ModelSerializer</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;图书数据序列化器&quot;&quot;&quot;</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Book</span><br><span class="line">        fields = <span class="string">&quot;__all__&quot;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>使用<strong>exclude</strong>可以明确排除掉哪些字段</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookSerializer</span>(<span class="params">serializers.ModelSerializer</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;图书数据序列化器&quot;&quot;&quot;</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Book</span><br><span class="line">        exclude = (<span class="string">&#x27;pub_date&#x27;</span>,)</span><br></pre></td></tr></table></figure><ol start="3"><li>显示指明字段，如：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookSerializer</span>(<span class="params">serializers.ModelSerializer</span>):</span></span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Book</span><br><span class="line">        fields = (<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;comment&#x27;</span>, <span class="string">&#x27;read&#x27;</span>)</span><br></pre></td></tr></table></figure><ol start="4"><li>指明只读字段</li></ol><p>可以通过<strong>read_only_fields</strong>指明只读字段，即仅用于序列化输出的字段</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookSerializer</span>(<span class="params">serializers.ModelSerializer</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;图书序列化器&quot;&quot;&quot;</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Book</span><br><span class="line">        fields = (<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;pub_date&#x27;</span>， <span class="string">&#x27;read&#x27;</span>, <span class="string">&#x27;comment&#x27;</span>)</span><br><span class="line">        read_only_fields = (<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;read&#x27;</span>, <span class="string">&#x27;comment&#x27;</span>)</span><br></pre></td></tr></table></figure><h5 id="3-添加额外参数"><a href="#3-添加额外参数" class="headerlink" title="3. 添加额外参数"></a>3. 添加额外参数</h5><p>我们可以使用<strong>extra_kwargs</strong>参数为ModelSerializer添加或修改原有的选项参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookSerializer</span>(<span class="params">serializers.ModelSerializer</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;图书序列化器&quot;&quot;&quot;</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Book</span><br><span class="line">        fields = (<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;pub_date&#x27;</span>, <span class="string">&#x27;read&#x27;</span>, <span class="string">&#x27;comment&#x27;</span>)</span><br><span class="line">        extra_kwargs = &#123;</span><br><span class="line">            <span class="string">&#x27;read&#x27;</span>: &#123;<span class="string">&#x27;min_value&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;required&#x27;</span>: <span class="literal">True</span>&#125;,</span><br><span class="line">            <span class="string">&#x27;comment&#x27;</span>: &#123;<span class="string">&#x27;min_value&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;required&#x27;</span>: <span class="literal">True</span>&#125;,</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看序列化器的构造</span></span><br><span class="line"><span class="comment"># BookSerializer():</span></span><br><span class="line"><span class="comment">#    id = IntegerField(label=&#x27;ID&#x27;, read_only=True)</span></span><br><span class="line"><span class="comment">#    title = CharField(label=&#x27;名称&#x27;, max_length=20)</span></span><br><span class="line"><span class="comment">#    pub_date = DateField(allow_null=True, label=&#x27;发布日期&#x27;, required=False)</span></span><br><span class="line"><span class="comment">#    read = IntegerField(label=&#x27;阅读量&#x27;, max_value=2147483647, min_value=0, required=True)</span></span><br><span class="line"><span class="comment">#    comment = IntegerField(label=&#x27;评论量&#x27;, max_value=2147483647, min_value=0, required=True)</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-WEB应用模式&quot;&gt;&lt;a href=&quot;#1-WEB应用模式&quot; class=&quot;headerlink&quot; title=&quot;1. WEB应用模式&quot;&gt;&lt;/a&gt;1. WEB应用模式&lt;/h1&gt;&lt;p&gt;在开发Web应用中，有两种应用模式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;前后端不分离&lt;/</summary>
      
    
    
    
    <category term="Django" scheme="http://yoursite.com/categories/Django/"/>
    
    
    <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
    <category term="Django" scheme="http://yoursite.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>「Django」9-中间件</title>
    <link href="http://yoursite.com/2021/02/07/django/Django-9-%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    <id>http://yoursite.com/2021/02/07/django/Django-9-%E4%B8%AD%E9%97%B4%E4%BB%B6/</id>
    <published>2021-02-07T01:43:28.000Z</published>
    <updated>2021-04-26T09:11:30.808Z</updated>
    
    <content type="html"><![CDATA[<p>Django 中间件是修改 Django request 或者 response 对象的钩子，可以理解为是介于 HttpRequest 与 HttpResponse 处理之间的一道处理过程。作用：</p><ul><li>修改请求，即传送到 view 中的 HttpRequest 对象。</li><li>修改响应，即 view 返回的 HttpResponse 对象。</li></ul><p>中间件组件配置在 settings.py 文件的 MIDDLEWARE 选项列表中。配置中的每个字符串选项都是一个类，也就是一个中间件。</p><h1 id="自定义中间件"><a href="#自定义中间件" class="headerlink" title="自定义中间件"></a>自定义中间件</h1><p>中间件可以定义四个方法，分别是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">process_request(self,request)</span><br><span class="line">process_view(self, request, view_func, view_args, view_kwargs)</span><br><span class="line">process_exception(self, request, exception)</span><br><span class="line">process_response(self, request, response)</span><br></pre></td></tr></table></figure><p>自定义中间的步骤：</p><p>在 app 目录下新建一个 py 文件，名字自定义，并在该 py 文件中导入 MiddlewareMixin：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.utils.deprecation <span class="keyword">import</span> MiddlewareMixin</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MD1</span>(<span class="params">MiddlewareMixin</span>):</span> <span class="comment"># 自定义的中间件类，要继承父类 MiddlewareMixin:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>在 settings.py 中的 MIDDLEWARE 里注册自定义的中间件类:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MIDDLEWARE = [</span><br><span class="line">...</span><br><span class="line">    <span class="string">&#x27;app01.middlewares.MD1&#x27;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p><img src="https://www.runoob.com/wp-content/uploads/2020/05/Django-md_5.png" alt="img"></p><h3 id="1-process-request-方法"><a href="#1-process-request-方法" class="headerlink" title="1. process_request 方法"></a>1. process_request 方法</h3><p>process_request 方法有一个参数 request，这个 request 和视图函数中的 request 是一样的。</p><p>process_request 方法的返回值可以是 None 也可以是 HttpResponse 对象。</p><ul><li>返回值是 None 的话，按正常流程继续走，交给下一个中间件处理。</li><li>返回值是 HttpResponse 对象，Django 将不执行后续视图函数之前执行的方法以及视图函数，直接以该中间件为起点，倒序执行中间件，且执行的是视图函数之后执行的方法。</li></ul><p>process_request 方法是在视图函数之前执行的。</p><p>当配置多个中间件时，会按照 MIDDLEWARE中 的注册顺序，也就是列表的索引值，顺序执行。</p><p>不同中间件之间传递的 request 参数都是同一个请求对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.utils.deprecation <span class="keyword">import</span> MiddlewareMixin</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render, HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MD1</span>(<span class="params">MiddlewareMixin</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span>(<span class="params">self, request</span>):</span></span><br><span class="line">       <span class="built_in">print</span>(<span class="string">&quot;md1  process_request 方法。&quot;</span>, <span class="built_in">id</span>(request)) <span class="comment">#在视图之前执行</span></span><br></pre></td></tr></table></figure><h3 id="2-process-response-方法"><a href="#2-process-response-方法" class="headerlink" title="2. process_response 方法"></a>2. process_response 方法</h3><p>process_response 方法有两个参数，一个是 request，一个是 response，request 是请求对象，response 是视图函数返回的 HttpResponse 对象，该方法必须要有返回值，且必须是response。</p><p>process_response 方法是在视图函数之后执行的。</p><p>当配置多个中间件时，会按照 MIDDLEWARE 中的注册顺序，也就是列表的索引值，倒序执行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MD1</span>(<span class="params">MiddlewareMixin</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;md1  process_request 方法。&quot;</span>, <span class="built_in">id</span>(request)) <span class="comment">#在视图之前执行</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_response</span>(<span class="params">self,request, response</span>):</span> :<span class="comment">#基于请求响应</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;md1  process_response 方法！&quot;</span>, <span class="built_in">id</span>(request)) <span class="comment">#在视图之后</span></span><br><span class="line">        <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><p>假设<strong>中间件1</strong>有返回值，则按照红色的路线走，直接执行该类下的 process_response 方法返回，后面的其他中间件就不会执行。</p><p><img src="https://www.runoob.com/wp-content/uploads/2020/05/md-sssss-1.png" alt="img"></p><h3 id="3-process-view-方法"><a href="#3-process-view-方法" class="headerlink" title="3. process_view 方法"></a>3. process_view 方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">process_view(request, view_func, view_args, view_kwargs)</span><br></pre></td></tr></table></figure><ul><li>request 是 HttpRequest 对象。</li><li>view_func 是 Django 即将使用的视图函数。</li><li>view_args 是将传递给视图的位置参数的列表。</li><li>view_kwargs 是将传递给视图的关键字参数的字典。</li></ul><p>process_view 方法是在视图函数之前，process_request 方法之后执行的。</p><p>返回值可以是 None、view_func(request) 或 HttpResponse 对象。</p><ul><li>返回值是 None 的话，按正常流程继续走，交给下一个中间件处理。</li><li>返回值是 HttpResponse 对象，Django 将不执行后续视图函数之前执行的方法以及视图函数，直接以该中间件为起点，倒序执行中间件，且执行的是视图函数之后执行的方法。</li><li>c.返回值是 view_func(request)，Django 将不执行后续视图函数之前执行的方法，提前执行视图函数，然后再倒序执行视图函数之后执行的方法。</li><li>当最后一个中间件的 process_request 到达路由关系映射之后，返回到第一个中间件 process_view，然后依次往下，到达视图函数。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MD1</span>(<span class="params">MiddlewareMixin</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;md1  process_request 方法。&quot;</span>, <span class="built_in">id</span>(request)) <span class="comment">#在视图之前执行</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_response</span>(<span class="params">self,request, response</span>):</span> :<span class="comment">#基于请求响应</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;md1  process_response 方法！&quot;</span>, <span class="built_in">id</span>(request)) <span class="comment">#在视图之后</span></span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_view</span>(<span class="params">self,request, view_func, view_args, view_kwargs</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;md1  process_view 方法！&quot;</span>) <span class="comment">#在视图之前执行 顺序执行</span></span><br><span class="line">        <span class="comment">#return view_func(request)</span></span><br></pre></td></tr></table></figure><p><img src="https://www.runoob.com/wp-content/uploads/2020/05/md-32rdf.png" alt="img"></p><h3 id="4-process-exception-方法"><a href="#4-process-exception-方法" class="headerlink" title="4. process_exception 方法"></a>4. process_exception 方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">process_exception(request, exception)</span><br></pre></td></tr></table></figure><ul><li>request 是 HttpRequest 对象。</li><li>exception 是视图函数异常产生的 Exception 对象。</li></ul><p>process_exception 方法只有在视图函数中出现异常了才执行，按照 settings 的注册倒序执行。</p><p>在视图函数之后，在 process_response 方法之前执行。</p><p>process_exception 方法的返回值可以是一个 None 也可以是一个 HttpResponse 对象。</p><p>返回值是 None，页面会报 500 状态码错误，视图函数不会执行。</p><p>process_exception 方法倒序执行，然后再倒序执行 process_response 方法。</p><p>返回值是 HttpResponse 对象，页面不会报错，返回状态码为 200。</p><p>视图函数不执行，该中间件后续的 process_exception 方法也不执行，直接从最后一个中间件的 process_response 方法倒序开始执行。</p><p>若是 process_view 方法返回视图函数，提前执行了视图函数，且视图函数报错，则无论 process_exception 方法的返回值是什么，页面都会报错， 且视图函数和 process_exception 方法都不执行。</p><p>直接从最后一个中间件的 process_response 方法开始倒序执行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MD1</span>(<span class="params">MiddlewareMixin</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;md1  process_request 方法。&quot;</span>, <span class="built_in">id</span>(request)) <span class="comment">#在视图之前执行</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_response</span>(<span class="params">self,request, response</span>):</span> :<span class="comment">#基于请求响应</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;md1  process_response 方法！&quot;</span>, <span class="built_in">id</span>(request)) <span class="comment">#在视图之后</span></span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_view</span>(<span class="params">self,request, view_func, view_args, view_kwargs</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;md1  process_view 方法！&quot;</span>) <span class="comment">#在视图之前执行 顺序执行</span></span><br><span class="line">        <span class="comment">#return view_func(request)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_exception</span>(<span class="params">self, request, exception</span>):</span><span class="comment">#引发错误 才会触发这个方法</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;md1  process_exception 方法！&quot;</span>)</span><br><span class="line">        <span class="comment"># return HttpResponse(exception) #返回错误信息</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Django 中间件是修改 Django request 或者 response 对象的钩子，可以理解为是介于 HttpRequest 与 HttpResponse 处理之间的一道处理过程。作用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;修改请求，即传送到 view 中的 HttpReq</summary>
      
    
    
    
    <category term="Django" scheme="http://yoursite.com/categories/Django/"/>
    
    
    <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
    <category term="Django" scheme="http://yoursite.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>flask入门</title>
    <link href="http://yoursite.com/2021/01/30/flask/flask/"/>
    <id>http://yoursite.com/2021/01/30/flask/flask/</id>
    <published>2021-01-30T11:51:12.000Z</published>
    <updated>2021-01-30T11:22:00.790Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0-简介"><a href="#0-简介" class="headerlink" title="0. 简介"></a>0. 简介</h1><p>Web框架：使Web应用程序开发人员能够编写应用程序，而不必担心如协议，线程管理等低层细节。</p><p>Web服务器网关接口(WSGI)：已被采纳为Python Web应用程序开发的标准。 WSGI是Web服务器和Web应用程序之间通用接口的规范。</p><p>WERKZEUG：是一个WSGI工具包，它实现了请求，响应对象和其他实用程序功能。 这可以在其上构建Web框架。 Flask框架使用Werkzeug作为其一个基础模块之一。</p><p>jinja2是Python的流行模板引擎。 网页模板系统将模板与特定的数据源结合起来呈现动态网页。</p><h1 id="1-flask-应用程序"><a href="#1-flask-应用程序" class="headerlink" title="1. flask 应用程序"></a>1. flask 应用程序</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><ul><li>Flask类的一个对象是WSGI应用程序。Flask构造函数将当前模块的名称(<strong>name</strong>)作为参数。</li><li>Flask类的route()函数是一个装饰器，它告诉应用程序哪个URL应该调用相关的函数。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.route(rule, options)</span><br></pre></td></tr></table></figure></li><li>rule 参数表示与该函数绑定的URL。</li><li>options 是要转发给底层Rule对象的参数列表。</li><li>run()方法在本地开发服务器上运行应用程序。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.run(host, port, debug, options)</span><br></pre></td></tr></table></figure><h2 id="1-1-调试模式"><a href="#1-1-调试模式" class="headerlink" title="1.1 调试模式"></a>1.1 调试模式</h2></li></ul><p>Flask应用程序通过调用run()方法来启动。 但是，当应用程序正在开发中时，应该为代码中的每个更改手动重新启动它。 为了避免这种不便，可以启用调试支持。 如果代码改变，服务器将自动重新加载。 它还将提供一个有用的调试器来跟踪应用程序中的错误(如果有的话)。在运行或将调试参数传递给run()方法之前，通过将应用程序对象的调试属性设置为True来启用调试模式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.debug = <span class="literal">True</span></span><br><span class="line">app.run()</span><br><span class="line">app.run(debug = <span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h2 id="1-2-Flask-路由"><a href="#1-2-Flask-路由" class="headerlink" title="1.2. Flask 路由"></a>1.2. Flask 路由</h2><p>现代Web框架使用路由技术来帮助用户记住应用程序URL。 无需从主页导航即可直接访问所需页面</p><p>方法1 ：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params">‘/hello’</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span>():</span></span><br><span class="line">    <span class="keyword">return</span> ‘hello world’</span><br></pre></td></tr></table></figure><p>方法2 :</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.add_url_rule(‘/’,’hello’,hello)</span><br></pre></td></tr></table></figure><h2 id="1-3-变量规则"><a href="#1-3-变量规则" class="headerlink" title="1.3 变量规则"></a>1.3 变量规则</h2><p>可以通过将可变部分添加到规则参数来动态构建URL。 这个变量部分被标记为<code>&lt;variable-name&gt;</code>。 它作为关键字参数传递给规则所关联的函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/hello/&lt;name&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_name</span>(<span class="params">name</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello %s!&#x27;</span> % name</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug = <span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>除了默认的字符串变量部分之外，还可以使用以下转换器构造规则：<code>int</code>,<code>float</code>,<code>path(接受用作目录分隔符的‘/’</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/blog/&lt;int:postID&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_blog</span>(<span class="params">postID</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Blog Number %d&#x27;</span> % postID</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/rev/&lt;float:revNo&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">revision</span>(<span class="params">revNo</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Revision Number %f&#x27;</span> % revNo</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>Flask的URL规则基于Werkzeug的路由模块。 这确保了形成的URL是唯一的，并且基于Apache制定的先例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/flask&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_flask</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello Flask&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/python/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_python</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello Python&#x27;</span></span><br></pre></td></tr></table></figure><p>在第二条规则中，使用了尾部斜线(/)。 因此，它变成了一个规范的URL。 因此，使用<code>/python</code>或<code>/python/</code>返回相同的输出。 但是，在第一条规则的情况下， URL:<code>/flask/</code>会导致<code>404 Not Found</code>页面。</p><h2 id="1-4-重定向和错误"><a href="#1-4-重定向和错误" class="headerlink" title="1.4 重定向和错误"></a>1.4 重定向和错误</h2><p><code>redirect()</code>函数在调用时，会返回一个响应对象，并将用户重定向到具有指定状态码的另一个目标位置。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Flask.redirect(location, statuscode, response)</span><br></pre></td></tr></table></figure><ul><li><em>location</em> 参数是响应应该被重定向的URL。</li><li><em>statuscode</em> 参数发送到浏览器的头标，默认为<code>302</code>，表示’找到’页面。</li><li><em>response</em> 参数用于实例化响应。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, redirect, url_for</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/admin&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_admin</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello Admin&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/guest/&lt;guest&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_guest</span>(<span class="params">guest</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello %s as Guest&#x27;</span> % guest</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/user/&lt;name&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user</span>(<span class="params">name</span>):</span></span><br><span class="line">    <span class="keyword">if</span> name ==<span class="string">&#x27;admin&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;hello_admin&#x27;</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;hello_guest&#x27;</span>,guest = name))</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>例：在登录尝试失败时再次显示登录页面</p><h2 id="1-5-HTTP方法"><a href="#1-5-HTTP方法" class="headerlink" title="1.5 HTTP方法"></a>1.5 HTTP方法</h2><table><thead><tr><th align="center">方法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">GET</td><td align="center">将数据以未加密的形式发送到服务器</td></tr><tr><td align="center">HEAD</td><td align="center">与GET相同，但没有响应主体</td></tr><tr><td align="center">POST</td><td align="center">用于将HTML表单数据发送到服务器。通过POST方法接收的数据不会被服务器缓存。</td></tr><tr><td align="center">PUT</td><td align="center">用上传的内容替换目标资源的所有当前表示。</td></tr><tr><td align="center">DELETE</td><td align="center">删除由URL给出的所有目标资源的所有表示</td></tr></tbody></table><p>来自客户端网页的数据作为全局请求对象发送到服务器。请求对象的重要属性如下所列 </p><ul><li>form - 它是包含表单参数及其值的键和值对的字典对象。</li><li>args - 解析问号(?)后的URL部分查询字符串的内容。</li><li>cookies - 保存Cookie名称和值的字典对象。</li><li>file - 与上传文件有关的数据。</li><li>method - 当前请求方法。</li></ul><p>默认情况下，Flask路由响应GET请求。 但是，可以通过为<code>route()</code>装饰器提供方法参数来更改此首选项。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- login.html --&gt;</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, redirect, url_for, request</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/success/&lt;name&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">success</span>(<span class="params">name</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;welcome %s&#x27;</span> % name</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>,<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        user = request.form[<span class="string">&#x27;name&#x27;</span>]</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;success&#x27;</span>,name=user))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        user = request.args.get(<span class="string">&#x27;name&#x27;</span>)  <span class="comment"># args是字典对象，包含一系列表单参数及其对应值。</span></span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;success&#x27;</span>, name=user))</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>对应的html文件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=utf-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Flask HTTP请求方法处理<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span> = <span class="string">&quot;http://localhost:5000/login&quot;</span> <span class="attr">method</span> = <span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">p</span>&gt;</span>输入姓名:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;text&quot;</span> <span class="attr">name</span> = <span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;submit&quot;</span> <span class="attr">value</span> = <span class="string">&quot;提交&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>例2 ：URL  <code>/</code> 呈现具有表单的网页(student.html)。填充的数据会提交到触发result()函数的URL <code>/result</code> 中。results()函数收集字典对象中<code>request.form</code>中存在的表单数据，并将其发送给<code>result.html</code> 并显示出来。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">student</span>():</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;student.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/result&#x27;</span>,methods = [<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">result</span>():</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        result = request.form</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&quot;result.html&quot;</span>,result = result)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- student.html --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span> = <span class="string">&quot;http://localhost:5000/result&quot;</span> <span class="attr">method</span> = <span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">p</span>&gt;</span>姓名 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;text&quot;</span> <span class="attr">name</span> = <span class="string">&quot;Name&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">p</span>&gt;</span>物理分数: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;text&quot;</span> <span class="attr">name</span> = <span class="string">&quot;Physics&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">p</span>&gt;</span>化学分数: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;text&quot;</span> <span class="attr">name</span> = <span class="string">&quot;Chemistry&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">p</span>&gt;</span>数学分数: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> =<span class="string">&quot;text&quot;</span> <span class="attr">name</span> = <span class="string">&quot;Mathematics&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;submit&quot;</span> <span class="attr">value</span> = <span class="string">&quot;提交&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  result.html  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span> = <span class="string">1</span>&gt;</span></span><br><span class="line">         &#123;% for key, value in result.items() %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">th</span>&gt;</span> &#123;&#123; key &#125;&#125; <span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">td</span>&gt;</span> &#123;&#123; value &#125;&#125; <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">         &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1-6-模板"><a href="#1-6-模板" class="headerlink" title="1.6 模板"></a>1.6 模板</h2><p>“Web模板系统”是指设计一个HTML脚本，其中可以动态插入变量数据。 Web模板系统由模板引擎，某种数据源和模板处理器组成。</p><p>Flask使用jinga2模板引擎。 Web模板包含用于变量和表达式(这些情况下为Python表达式)的HTML语法散布占位符，这些变量和表达式在模板呈现时被替换为值。</p><p>Flask可以利用Jinja2模板引擎技术，不需要从函数返回硬编码HTML，而通过<code>render_template()</code>函数渲染HTML文件。flask会在当前文件所在的同一文件夹中查找<code>templates</code>文件夹中的HTML文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/hello/&lt;name&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_user</span>(<span class="params">name</span>):</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;hello.html&#x27;</span>, name=name)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/scorequery/&lt;int:score&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">score</span>(<span class="params">score</span>):</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;score_query.html&#x27;</span>, marks=score)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>运行<code>http://localhost:5000/hello/maxsu</code>, URL的可变部分插入<code>&#123;&#123;name&#125;&#125;</code>占位符处。</p><p>Jinja2模板引擎使用以下分隔符来从HTML转义。</p><ul><li><code>&#123;% ... %&#125;</code> 用于多行语句</li><li><code>&#123;&#123; ... &#125;&#125;</code> 用于将表达式打印输出到模板</li><li><code>&#123;# ... #&#125;</code> 用于未包含在模板输出中的注释</li><li><code># ... ##</code> 用于单行语句</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- score_query.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    &#123;% if marks&gt;50 %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span> 通过考试！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    &#123;% else %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>未通过考试！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- for_result.htm￼l --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span> = <span class="string">1</span>&gt;</span></span><br><span class="line">         &#123;% for key, value in result.items() %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">th</span>&gt;</span> &#123;&#123; key &#125;&#125; <span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">td</span>&gt;</span> &#123;&#123; value &#125;&#125; <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">         &#123;% endfor %&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1-7-flask静态文件"><a href="#1-7-flask静态文件" class="headerlink" title="1.7 flask静态文件"></a>1.7 flask静态文件</h2><p>Web应用程序通常需要一个静态文件，例如支持显示网页的JavaScript文件或CSS文件。 通常，可以通过配置Web服务器提供这些服务，但在开发过程中，这些文件将从包中的静态文件夹或模块旁边提供，它将在应用程序的/static上提供。使用特殊的端点“静态”来为静态文件生成URL。</p><p>例：index.html中的HTML按钮的OnClick事件调用hello.js中定义的javascript函数，该函数在Flask应用程序的URL =&gt; / 中呈现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;index.html&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- index.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span> = <span class="string">&quot;text/javascript&quot;</span> </span></span><br><span class="line"><span class="tag">         <span class="attr">src</span> = <span class="string">&quot;&#123;&#123; url_for(&#x27;static&#x27;, filename = &#x27;hello.js&#x27;) &#125;&#125;&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;button&quot;</span> <span class="attr">onclick</span> = <span class="string">&quot;sayHello()&quot;</span> <span class="attr">value</span> = <span class="string">&quot;Say Hello&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>hello.js 中定义包含 sayHello() 函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHello</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   alert(<span class="string">&quot;Hello World&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-8-cookies-处理"><a href="#1-8-cookies-处理" class="headerlink" title="1.8 cookies 处理"></a>1.8 cookies 处理</h2><p>Cookie以文本文件的形式存储在客户端计算机上。 其目的是记住和跟踪与客户使用有关的数据，以获得更好的访问体验和网站统计。</p><p>Request对象包含一个<code>cookie</code>的属性。 它是所有cookie变量及其对应值的字典对象，客户端已发送。 除此之外，cookie还会存储其到期时间，路径和站点的域名。</p><p>Flask中，cookies设置在响应对象上。 使用<code>make_response()</code>函数从视图函数的返回值中获取响应对象。 之后，使用响应对象的<code>set_cookie()</code>函数来存储cookie。 可以使用<code>request.cookies</code>属性的<code>get()</code>方法来读取cookie。</p><p>例：访问URL =&gt; <code>/</code> 时，打开一个简单的表单。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> render_template</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> make_response</span><br><span class="line">...</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- index.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span> = <span class="string">&quot;/setcookie&quot;</span> <span class="attr">method</span> = <span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">h3</span>&gt;</span>Enter userID<span class="tag">&lt;/<span class="name">h3</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&#x27;text&#x27;</span> <span class="attr">name</span> = <span class="string">&#x27;name&#x27;</span>/&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&#x27;submit&#x27;</span> <span class="attr">value</span> = <span class="string">&#x27;登录&#x27;</span>/&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 关联的视图函数设置一个Cookie名称为:<code>userID</code>，并在另一个页面中呈现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/setcookie&#x27;</span>, methods = [<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setcookie</span>():</span></span><br><span class="line">   <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        user = request.form[<span class="string">&#x27;name&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        resp = make_response(render_template(<span class="string">&#x27;readcookie.html&#x27;</span>))</span><br><span class="line">        resp.set_cookie(<span class="string">&#x27;userID&#x27;</span>, user)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> resp</span><br></pre></td></tr></table></figure><p><code>readcookie.html</code> 包含超链接到另一个函数<code>getcookie()</code>的视图，该函数读回并在浏览器中显示cookie值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/getcookie&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getcookie</span>():</span></span><br><span class="line">    name = request.cookies.get(<span class="string">&#x27;userID&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&lt;h1&gt;welcome &#x27;</span>+name+<span class="string">&#x27;&lt;/h1&gt;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="1-9-Sessions-会话"><a href="#1-9-Sessions-会话" class="headerlink" title="1.9 Sessions 会话"></a>1.9 Sessions 会话</h2><p>与Cookie不同，会话数据存储在服务器上。 会话是客户端登录到服务器并注销的时间间隔。 需要在此会话中进行的数据存储在服务器上的临时目录中。</p><p>与每个客户端的会话分配一个会话ID。 会话数据存储在cookie顶部，服务器以加密方式签名。 对于这种加密，Flask应用程序需要一个定义<code>SECRET_KEY</code>。</p><p>会话对象也是一个包含会话变量和关联值的键值对的字典对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置&#x27;username&#x27;会话变量</span></span><br><span class="line">Session[<span class="string">&#x27;username&#x27;</span>] = <span class="string">&#x27;admin&#x27;</span></span><br><span class="line"><span class="comment"># 要删除会话变量，使用`pop()`方法。</span></span><br><span class="line">session.pop(<span class="string">&#x27;username&#x27;</span>, <span class="literal">None</span>)</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> render_template</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> make_response</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, session, redirect, url_for, escape, request</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = <span class="string">&#x27;fkdjsafjdkfdlkjfadskjfadskljdsfklj&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;username&#x27;</span> <span class="keyword">in</span> session:</span><br><span class="line">        username = session[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;登录用户名是:&#x27;</span> + username + <span class="string">&#x27;&lt;br&gt;&#x27;</span> + \</span><br><span class="line">                 <span class="string">&quot;&lt;b&gt;&lt;a href = &#x27;/logout&#x27;&gt;点击这里注销&lt;/a&gt;&lt;/b&gt;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;您暂未登录， &lt;br&gt;&lt;a href = &#x27;/login&#x27;&gt;&lt;/b&gt;&quot;</span> + \</span><br><span class="line">         <span class="string">&quot;点击这里登录&lt;/b&gt;&lt;/a&gt;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>, methods = [<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        session[<span class="string">&#x27;username&#x27;</span>] = request.form[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">   &lt;form action = &quot;&quot; method = &quot;post&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;p&gt;&lt;input type =&quot;text&quot; name =&quot;username&quot;/&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">      &lt;p&gt;&lt;input type =&quot;submit&quot; value =&quot;登录&quot;/&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">   &lt;/form&gt;</span></span><br><span class="line"><span class="string">   &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/logout&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logout</span>():</span></span><br><span class="line">   <span class="comment"># remove the username from the session if it is there</span></span><br><span class="line">   session.pop(<span class="string">&#x27;username&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">   <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug = <span class="literal">True</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0-简介&quot;&gt;&lt;a href=&quot;#0-简介&quot; class=&quot;headerlink&quot; title=&quot;0. 简介&quot;&gt;&lt;/a&gt;0. 简介&lt;/h1&gt;&lt;p&gt;Web框架：使Web应用程序开发人员能够编写应用程序，而不必担心如协议，线程管理等低层细节。&lt;/p&gt;
&lt;p&gt;Web服务器</summary>
      
    
    
    
    
    <category term="flask" scheme="http://yoursite.com/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>7 - 速查</title>
    <link href="http://yoursite.com/2021/01/30/git/7-%E9%80%9F%E6%9F%A5/"/>
    <id>http://yoursite.com/2021/01/30/git/7-%E9%80%9F%E6%9F%A5/</id>
    <published>2021-01-30T10:54:07.000Z</published>
    <updated>2021-04-27T04:03:28.954Z</updated>
    
    <content type="html"><![CDATA[<h3 id="恢复到最后一个提交"><a href="#恢复到最后一个提交" class="headerlink" title="恢复到最后一个提交"></a>恢复到最后一个提交</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout .</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;恢复到最后一个提交&quot;&gt;&lt;a href=&quot;#恢复到最后一个提交&quot; class=&quot;headerlink&quot; title=&quot;恢复到最后一个提交&quot;&gt;&lt;/a&gt;恢复到最后一个提交&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t</summary>
      
    
    
    
    <category term="git" scheme="http://yoursite.com/categories/git/"/>
    
    
    <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>6 - 自定义Git</title>
    <link href="http://yoursite.com/2021/01/30/git/6-%E8%87%AA%E5%AE%9A%E4%B9%89Git/"/>
    <id>http://yoursite.com/2021/01/30/git/6-%E8%87%AA%E5%AE%9A%E4%B9%89Git/</id>
    <published>2021-01-30T10:53:54.000Z</published>
    <updated>2021-04-27T04:01:10.014Z</updated>
    
    <content type="html"><![CDATA[<h2 id="忽略特殊文件"><a href="#忽略特殊文件" class="headerlink" title="忽略特殊文件"></a>忽略特殊文件</h2><p>为了在<code>git status</code>时不因为一些特殊文件显示 <code>Untracked files .. </code>，在Git工作区的根目录下创建一个特殊的<code>.gitignore</code>文件，然后把要忽略的文件名填进去，Git就会自动忽略这些文件。 </p><p>忽略文件的原则是：</p><ol><li>忽略操作系统自动生成的文件，比如缩略图等；</li><li>忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如Java编译产生的<code>.class</code>文件；</li><li>忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 此为注释 – 将被 Git 忽略</span><br><span class="line"></span><br><span class="line">*.db       # 忽略所有 .db 结尾的文件</span><br><span class="line">!ABC.db    # 但 ABC.db 除外</span><br><span class="line">&#x2F;BLL       # 仅仅忽略项目根目录下的 BLL 文件，不包括 subdir&#x2F;BLL</span><br><span class="line">build&#x2F;     # 忽略 build&#x2F; 目录下的所有文件</span><br><span class="line">doc&#x2F;*.txt  # 会忽略 doc&#x2F;notes.txt 但不包括 doc&#x2F;server&#x2F;arch.txt</span><br></pre></td></tr></table></figure><p>把<code>.gitignore</code>也提交到Git，就完成了 </p><p>有时候想添加一个文件到Git，但发现添加不了，原因是这个文件被<code>.gitignore</code>忽略了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git add App.class</span><br><span class="line">The following paths are ignored by one of your .gitignore files:</span><br><span class="line">App.class</span><br><span class="line">Use -f if you really want to add them.</span><br></pre></td></tr></table></figure><p>如果你确实想添加该文件，可以用<code>-f</code>强制添加到Git：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add -f App.class</span><br></pre></td></tr></table></figure><p>如果发现<code>.gitignore</code>写得有问题，需要找出来到底哪个规则写错了，可以用<code>git check-ignore</code>命令检查：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git check-ignore -v App.class</span><br><span class="line">.gitignore:3:*.classApp.class</span><br></pre></td></tr></table></figure><p>Git会告诉我们，<code>.gitignore</code>的第3行规则忽略了该文件，于是我们就可以知道应该修订哪个规则。</p><h2 id="配置别名"><a href="#配置别名" class="headerlink" title="配置别名"></a>配置别名</h2><p> <code>--global</code>参数是全局参数，也就是这些命令在这台电脑的所有Git仓库下都有用 ，键入下行命令：<code>st</code>就表示<code>status</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global alias.st status</span><br></pre></td></tr></table></figure><p>配置一个<code>git last</code>，让其显示最后一次提交信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global alias.last &#39;log -1&#39;</span><br></pre></td></tr></table></figure><p><code>ci</code>表示<code>commit</code>，<code>br</code>表示<code>branch</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global alias.ci commit</span><br><span class="line">$ git config --global alias.br branch</span><br></pre></td></tr></table></figure><p>命令<code>git reset HEAD file</code>可以把暂存区的修改撤销掉（unstage），重新放回工作区。既然是一个unstage操作，就可以配置一个<code>unstage</code>别名：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global alias.unstage &#39;reset HEAD&#39;</span><br></pre></td></tr></table></figure><p>把<code>lg</code>配置成了：（git lg显示更清楚)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global alias.lg &quot;log --color --graph --pretty&#x3D;format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#39; --abbrev-commit&quot;</span><br></pre></td></tr></table></figure><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>每个仓库的Git配置文件都放在<code>.git/config</code>文件中。</p><p>当前用户的Git配置文件放在用户主目录下的一个隐藏文件<code>.gitconfig</code>中。  配置别名也可以直接修改这个文件，如果改错了，可以删掉文件重新通过命令配置。 </p><h2 id="搭建Git服务器"><a href="#搭建Git服务器" class="headerlink" title="搭建Git服务器"></a>搭建Git服务器</h2><p>需要用 Ubuntu 在Linux环境下搭建。此事以后再议…(咕咕咕)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;忽略特殊文件&quot;&gt;&lt;a href=&quot;#忽略特殊文件&quot; class=&quot;headerlink&quot; title=&quot;忽略特殊文件&quot;&gt;&lt;/a&gt;忽略特殊文件&lt;/h2&gt;&lt;p&gt;为了在&lt;code&gt;git status&lt;/code&gt;时不因为一些特殊文件显示 &lt;code&gt;Untracked</summary>
      
    
    
    
    <category term="git" scheme="http://yoursite.com/categories/git/"/>
    
    
    <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>5 - GitHub &amp;&amp; Gitee</title>
    <link href="http://yoursite.com/2021/01/30/git/5-GitHub-Gitee/"/>
    <id>http://yoursite.com/2021/01/30/git/5-GitHub-Gitee/</id>
    <published>2021-01-30T10:53:42.000Z</published>
    <updated>2021-04-27T04:01:07.985Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h1><p>比如人气极高的bootstrap项目，这是一个非常强大的CSS框架，你可以访问它的项目主页<a href="https://github.com/twbs/bootstrap%EF%BC%8C">https://github.com/twbs/bootstrap，</a> 点“Fork”就在自己的账号下克隆了一个bootstrap仓库，然后，从自己的账号下clone：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:michaelliao&#x2F;bootstrap.git</span><br></pre></td></tr></table></figure><p>自己拥有Fork后的仓库的读写权限。如果从bootstrap的作者的仓库地址克隆，因为没有权限，你将不能推送修改。 </p><p>如果你希望bootstrap的官方库能接受你的修改，你就可以在GitHub上发起一个pull request。当然，对方是否接受你的pull request就不一定了。 </p><h1 id="Gitee"><a href="#Gitee" class="headerlink" title="Gitee"></a>Gitee</h1><p>使用GitHub时，国内的用户经常遇到的问题是访问速度太慢， 如果想要体验Git飞一般的速度，可以使用国内的Git托管服务——<a href="https://gitee.com/?utm_source=blog_lxf">Gitee</a>（<a href="https://gitee.com/?utm_source=blog_lxf">gitee.com</a>）。 </p><p>把learngit库和Gitee的远程库关联：（ 使用多个远程库时，我们要注意，git给远程库起的默认名称是<code>origin</code>，如果有多个远程库，我们需要用不同的名称来标识不同的远程库。 ）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add gitee git@gitee.com:liaoxuefeng&#x2F;learngit.git</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote rename origin github          &#x2F;&#x2F;对之前的origin从命名为github</span><br></pre></td></tr></table></figure><p>用<code>git remote -v</code>查看远程库信息，可以看到两个远程库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br><span class="line">giteegit@gitee.com:liaoxuefeng&#x2F;learngit.git (fetch)</span><br><span class="line">giteegit@gitee.com:liaoxuefeng&#x2F;learngit.git (push)</span><br><span class="line">githubgit@github.com:michaelliao&#x2F;learngit.git (fetch)</span><br><span class="line">githubgit@github.com:michaelliao&#x2F;learngit.git (push)</span><br></pre></td></tr></table></figure><p>可以删除已有的GitHub远程库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote rm github</span><br></pre></td></tr></table></figure><p>如果要推送到GitHub，使用命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push github master</span><br></pre></td></tr></table></figure><p>如果要推送到Gitee，使用命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push gitee master</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;GitHub&quot;&gt;&lt;a href=&quot;#GitHub&quot; class=&quot;headerlink&quot; title=&quot;GitHub&quot;&gt;&lt;/a&gt;GitHub&lt;/h1&gt;&lt;p&gt;比如人气极高的bootstrap项目，这是一个非常强大的CSS框架，你可以访问它的项目主页&lt;a href=&quot;</summary>
      
    
    
    
    <category term="git" scheme="http://yoursite.com/categories/git/"/>
    
    
    <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
</feed>
